module common is

-- We define a simple programming language with the following instruction:
-- ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, branch_target, do_branch)

-------------------------------------------------------------------------------
-- Types, Channels

type NatSet is
  set of nat
  with "length", "remove", "member"
end type

-- Shared memory
function NumMemLoc() : nat is
  return 1
end function

type MemArray is
  array [1..1] of int
end type

type MemLoc is
  range 1..1 of nat
end type

type Instruction is
  ATOMIC_EXCH_BRANCH(check_loc: MemLoc, exch_val: int, do_exch: bool, check_val: int, branch_target: nat, do_branch: bool)
   with "get"
end type

type Program is
   list of Instruction
   with "access", "length"
end type

-- A channel is a way to type the interactions between processes

channel NatChan is
  (nat)
end channel

channel ExChan is
  -- tid, instruction, number of steps since fairly scheduled thread
  (nat, Instruction, nat)
end channel

-------------------------------------------------------------------------------
-- Processes

-- This process is an interpretor for our simple programming language
-- It makes actions on gate "EX" (EXecute) to both show which instruction it
-- executes, and to synchronize with the "Memory" process defined below.
-- Arguments are: Thread id, Program to execute
-- ('select A [] B end select' is the non-deterministic choice between actions)
process Thread [EX: ExChan, TERMINATE: NatChan] (tid: nat, prog: Program) is
  var
    pc: nat, -- program counter
    -- variables to match ATOMIC_EXCH_BRANCH_MEM arguments:
    check_loc: MemLoc, exch_val: int, do_exch: bool, check_val: int, branch_target: nat
 in
    pc := 1; -- start at first instruction (list indexes start at 1)

    loop execute_loop in

      case access(prog, pc) of Instruction in
         ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, branch_target, any bool) ->
            select
               EX(tid, ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, branch_target, true), ?any nat);
               pc := branch_target
            []
               EX(tid, ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, branch_target, false), ?any nat);
               pc := pc + 1
            end select
      end case;

      -- Reach end of program?
      if pc > length(prog) then
        break execute_loop
      end if

    end loop;
    -- signal end of thread to scheduler
    TERMINATE(tid)
  end var
end process

-- This process specifies the behavior of the shared memory
-- The gate "EX" (EXecute) is used to synchronize with other processes, which represent threads
process SHARED_MEMORY [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      doneThread: nat,
      mem: MemArray,
      -- variables to match ATOMIC_EXCH_BRANCH_MEM arguments:
      check_loc: MemLoc, exch_val: int, do_exch: bool, check_val: int, do_branch: bool
   in
      doneThread := 0;
      mem := MemArray(0);

      -- main loop
      loop mem_loop in
         select
            EX(?any nat, ?ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, any nat, do_branch), ?any nat) where do_branch == (check_val == mem[nat(check_loc)]);
	    if do_exch then
               mem[nat(check_loc)] := exch_val
            end if

         []

            TERMINATE(?any nat);
            doneThread := doneThread + 1;
            if doneThread == numThread then
               break mem_loop
            end if
         end select
      end loop
   end var
end process

	
-- This process specifies the scheduler for the Heterogeneous System
-- Architecture model, where threads are fairly scheduled based on
-- their id, in a round-robin fashion starting a index 0 and
-- increasing by 1 every time the active thread terminates.
process SCHEDULER_HSA [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      activeThread: nat,
      eventualCounter: nat,
      tid: nat
   in
      activeThread := 0;
      eventualCounter := 0;
    loop sched_loop in
      select

        eventualCounter := 0;
	EX(activeThread, ?any Instruction, eventualCounter);

      []

        -- Only the active thread is guaranteed fair scheduling, and will do so at least after X steps
	EX(?tid , ?any Instruction, eventualCounter) where eventualCounter < 10;
	eventualCounter := eventualCounter + 1;
	if tid == activeThread then
	      	  eventualCounter := 0
	      	   end if

      []

        -- When activeThread terminates, provide fair scheduling to the next thread id
        TERMINATE(activeThread);

	activeThread := activeThread + 1;
	eventualCounter := 0;
	
	if activeThread == numThread then
           break sched_loop
        end if

      end select
    end loop
  end var
end process

end module
