module common is

-- We define a simple programming language with the following instruction:
-- ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, branch_target, do_branch)

-------------------------------------------------------------------------------
-- Types, Channels

type NatSet is
  sorted set of nat
  with "length", "remove", "member", "access"
end type

-- Shared memory
function NumMemLoc() : nat is
  return 2
end function

type MemArray is
  array [1..2] of int
end type

type MemLoc is
  range 1..2 of nat
end type

type Instruction is
  ATOMIC_EXCH_BRANCH(check_loc: MemLoc, exch_val: int, do_exch: bool, check_val: int, branch_target: nat, do_branch: bool)
   with "get"
end type

type Program is
   list of Instruction
   with "access", "length"
end type

-- A channel is a way to type the interactions between processes

channel NatChan is
  (nat)
end channel

channel ExChan is
  -- tid, instruction, do_branch
  (nat, Instruction, String)
end channel

-------------------------------------------------------------------------------
-- Functions

function print_natset(nset: NatSet): String is
  var n: nat, s: String in
    if length(nset) == 0 then
      return "::"
    else
      s := ":";
      for n := 0 while n < length() by n := n + 1 loop
        s := s + String(access(nset, n)) + ":"
      end loop;
      return s
    end if
  end var
end function


-------------------------------------------------------------------------------
-- Processes

-- This process is an interpretor for our simple programming language
-- It makes actions on gate "EX" (EXecute) to both show which instruction it
-- executes, and to synchronize with the "Memory" process defined below.
-- Arguments are: Thread id, Program to execute
-- ('select A [] B end select' is the non-deterministic choice between actions)
process Thread [EX: ExChan, TERMINATE: NatChan] (tid: nat, prog: Program) is
  var
    pc: nat, -- program counter
    -- variables to match ATOMIC_EXCH_BRANCH_MEM arguments:
    check_loc: MemLoc, exch_val: int, do_exch: bool, check_val: int, branch_target: nat
 in
    pc := 1; -- start at first instruction (list indexes start at 1)

    loop execute_loop in

      case access(prog, pc) of Instruction in
         ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, branch_target, any bool) ->
            select
               EX(tid, ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, branch_target, true), ?any String);
               pc := branch_target
            []
               EX(tid, ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, branch_target, false), ?any String);
               pc := pc + 1
            end select
      end case;

      -- Reach end of program?
      if pc > length(prog) then
        break execute_loop
      end if

    end loop;
    -- signal end of thread to scheduler
    TERMINATE(tid)
  end var
end process

-- This process specifies the behavior of the shared memory
-- The gate "EX" (EXecute) is used to synchronize with other processes, which represent threads
process SHARED_MEMORY [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      doneThread: nat,
      mem: MemArray,
      -- variables to match ATOMIC_EXCH_BRANCH_MEM arguments:
      check_loc: MemLoc, exch_val: int, do_exch: bool, check_val: int, do_branch: bool
   in
      doneThread := 0;
      mem := MemArray(0);

      -- main loop
      loop mem_loop in
         select
            EX(?any nat, ?ATOMIC_EXCH_BRANCH(check_loc, exch_val, do_exch, check_val, any nat, do_branch), ?any String) where do_branch == (check_val == mem[nat(check_loc)]);
	    if do_exch then
               mem[nat(check_loc)] := exch_val
            end if

         []

            TERMINATE(?any nat);
            doneThread := doneThread + 1;
            if doneThread == numThread then
               break mem_loop
            end if
         end select
      end loop
   end var
end process


-- This process specifies a "no scheduler", which always allows any process to execute
process SCHEDULER_NONE [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      doneThread: nat,
      ts: NatSet
   in
      doneThread := 0;
      ts := {};

      loop sched_loop in
         select

            -- Execution step of a thread
            EX(?any nat, ?any Instruction, print_natset(ts))

         []

            -- a Thread may stop at any time
            TERMINATE(?any nat);
            doneThread := doneThread + 1;
            if doneThread == numThread then
               break sched_loop
            end if

         end select
      end loop
   end var
end process

process SCHEDULER_WEAK_FAIR [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      doneThread: nat,
      ts: NatSet,
      tid:nat,
      i:nat
   in
      doneThread := 0;
      ts := {};
      i := 0;

      while i < numThread loop
	      ts := insert(i, ts);
         i := i + 1
	   end loop;

      loop sched_loop in
         select

            -- Execution step of a thread
            EX(?any nat, ?any Instruction, ts)

         []

            -- a Thread may stop at any time
            TERMINATE(?tid);
            ts := remove(tid, ts);

            doneThread := doneThread + 1;
            if doneThread == numThread then
               break sched_loop
            end if

         end select
      end loop
   end var
end process

-- This process specifies the scheduler for Occupancy Bound Execution model,
-- where a thread is fairly scheduled if it has performed at least one operation
process SCHEDULER_OBE [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      doneThread: nat,
      tid: nat,
      activeThreads: NatSet,
      numCU: nat
   in
      doneThread := 0;
      numCU := numThread;
      activeThreads := {};

    loop sched_loop in
      select

        -- First execution step of a thread
        EX(?tid, ?any Instruction, print_natset(activeThreads)) where length(activeThreads) < numCU and not(member(tid, activeThreads));
        activeThreads := insert(tid, activeThreads)

      []

        -- a Thread already present in activeThreads can execute
        EX(?tid, ?any Instruction, print_natset(activeThreads)) where member(tid, activeThreads)

      []

        -- a Thread may stop at any time, it is then remove from the list of active threads
        TERMINATE(?tid);
	     activeThreads := remove(tid, activeThreads);
        doneThread := doneThread + 1;
        if doneThread == numThread then
           break sched_loop
        end if

      end select
    end loop
  end var
end process

-- This process specifies the scheduler for the Heterogeneous System
-- Architecture model, where threads are fairly scheduled based on
-- their id, in a round-robin fashion starting a index 0 and
-- increasing by 1 every time the active thread terminates.
process SCHEDULER_HSA [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      doneThread: nat,
      fairSched: NatSet
   in
      doneThread := 0;
      fairSched := {doneThread};

      loop sched_loop in
         select

            -- Execution step of a thread
            EX(?any nat, ?any Instruction, fairSched)

         []

            -- a Thread may stop at any time
            TERMINATE(?any nat);
            doneThread := doneThread + 1;
            if doneThread == numThread then
               break sched_loop
            end if;

            if member(tid, fairSched) then
               fairSched := {doneThread}
            end if

         end select
      end loop
   end var
end process

-- This process specifies a scheduler similar to HSA, but where threads not guaranteed
-- to execute fairly (while not guaranteed to continue) are next to resume when a CU becomes
-- available.
process SCHEDULER_HSA_PRIORITY [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      activeThread: nat,
      tid: nat,
      schedSet: NatSet,
      tokenSet: NatSet,
      numCU: nat
   in
      activeThread := 0;
      numCU := numThread;
      schedSet := {activeThread};
      tokenSet := {activeThread};
    loop sched_loop in
      select

        -- First execution step of a thread
	   EX(?tid, ?any Instruction, print_natset(schedSet)) where length(tokenSet) < numCU and not(member(tid, tokenSet));
      tokenSet := insert(tid, tokenSet)

      []

        -- a Thread already present in activeThreads can execute
        EX(?tid, ?any Instruction, print_natset(schedSet)) where member(tid, tokenSet)

      []

        -- When activeThread terminates, provide fair scheduling to the next thread id
        TERMINATE(?tid);

       -- Return token. If first id thread, give token to next fair sched thread
        tokenSet := remove(tid, tokenSet);
        if tid == activeThread then
           activeThread := activeThread + 1;
           schedSet := {activeThread};
           tokenSet := insert(activeThread, tokenSet)
        end if;

        if activeThread == numThread then
           break sched_loop
        end if

      end select
    end loop
  end var
end process


-- This process specifies the scheduler for the HSA+OBE model, which
-- combines HSA and OBE behaviours.
process SCHEDULER_HSA_OBE [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      doneThreads: NatSet,
      tid: nat,
      hsaThread: nat,
      activeThreads: NatSet,
      numCU: nat
   in
      doneThreads := {};
      hsaThread := 0;
      numCU := numThread;
      activeThreads := {hsaThread};

      -- This is OBE behaviour, with the thread corresponding to HSA index being always present in activeThreads

    loop sched_loop in
      select

        -- First execution step of a thread
	EX(?tid, ?any Instruction, print_natset(activeThreads)) where length(activeThreads) < numCU and not(member(tid, activeThreads));
        activeThreads := insert(tid, activeThreads)

      []

        -- a Thread already present in activeThreads can execute
        EX(?tid, ?any Instruction, print_natset(activeThreads)) where member(tid, activeThreads)

      []

        -- Termination of a thread
        TERMINATE(?tid); 
	     activeThreads := remove(tid, activeThreads);

        doneThreads := insert(tid, doneThreads);

        if length(doneThreads) == numThread then
           break sched_loop
        end if;

        -- If we reach here, then there is still at least one thread
        -- which is not terminated. By construction, this thread ID
        -- must be greater than hsaThread. Increment HSA thread until
        -- we hit this thread index.
        if tid == hsaThread then
           while member(hsaThread, doneThreads) loop
	      hsaThread := hsaThread + 1;
	      if not(member(hsaThread, activeThreads)) then
	      	 activeThreads := insert(hsaThread, activeThreads)
	      end if
	   end loop
	end if

      end select
    end loop
  end var
end process


-- This process specifies the scheduler for the Linear OBE model,
-- where threads are guaranteed fair scheduling as soon as any thread
-- ID greater or equal to theirs has made a first execution step.
process SCHEDULER_LOBE [EX: ExChan, TERMINATE: NatChan] (numThread: nat) is
   var
      doneThreads: nat,
      doneSet: NatSet,
      tid: nat,
      highestID: nat,
      threadSet: NatSet,
      numCU: nat,
      i: nat
   in
      doneThreads := 0;
      numCU := numThread;
      highestID := numCU;

      threadSet := {};
      doneSet := {};

    loop sched_loop in
      select

      -- First execution step of a thread
	      EX(?tid, ?any Instruction, threadSet) where tid < highestID and not(member(tid, threadSet));
         
         -- We guarantee all smaller id threads
         i := 0;
         while i < tid loop
            if not(member(i, threadSet)) and not(member(i, doneSet)) then
	            threadSet := insert(i, threadSet)
            end if;
            i := i + 1
	      end loop;
         threadSet := insert(tid, threadSet)

      []

        -- any Thread up to highestID is guaranteed fairly scheduling
        EX(?tid, ?any Instruction, print_natset(threadSet)) where tid < highestID

      []

        -- Termination of a thread
        TERMINATE(?tid);
	     doneThreads := doneThreads + 1;
        doneSet := insert(tid, doneSet);
	     if doneThreads == numThread then
           break sched_loop
        end if;

        -- a Thread just terminated, we bump highestID to allow a new thread to be scheduled.
        if highestID < numThread then
           threadSet := insert(highestID, threadSet)
        end if;
        threadSet := remove(tid, threadSet);

        highestID := highestID + 1

      end select
    end loop
  end var
end process

end module