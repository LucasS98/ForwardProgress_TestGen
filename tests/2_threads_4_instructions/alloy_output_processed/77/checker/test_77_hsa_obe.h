/*** generated by caesar.adt 5.6 with options -cc "" -debug -numeral "256" -silent ***/

#define CAESAR_ADT 5.6

#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_ALLOC

#ifndef CAESAR_ADT_GARBAGE_COLLECTION
#define GC_malloc(CAESAR_ADT_0) malloc(CAESAR_ADT_0)
#else
extern char *GC_malloc();
#endif

#define CAESAR_ADT_ALLOC(CAESAR_ADT_0,CAESAR_ADT_BODY,CAESAR_ADT_TYPE,CAESAR_ADT_LOTOS_OPERATION,CAESAR_ADT_C_FUNCTION) if (((CAESAR_ADT_0) = (CAESAR_ADT_TYPE) GC_malloc (sizeof (CAESAR_ADT_BODY))) == NULL) { printf ("#274 error in file ``.h'' :\n     memory shortage for abstract data types\n     in operation %s\n     implemented by function %s [%s:%d]\n", CAESAR_ADT_LOTOS_OPERATION, CAESAR_ADT_C_FUNCTION, __FILE__, __LINE__); fflush (stdout); raise (SIGTERM); } else ((void) 0)

#endif

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_ERROR
#define CAESAR_ADT_ERROR(CAESAR_ADT_LOTOS_OPERATION,CAESAR_ADT_C_FUNCTION) if (1) { printf ("#275 error in file ``.h'' :\n     unexpected case (not defined by the equations)\n     in operation %s\n     implemented by function %s [%s:%d]\n", CAESAR_ADT_LOTOS_OPERATION, CAESAR_ADT_C_FUNCTION, __FILE__, __LINE__); goto CAESAR_ADT_EXIT_DEBUG; } else ((void) 0)
#endif

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_VOID
#define CAESAR_ADT_VOID(CAESAR_ADT_LOTOSNT_TYPE) if (1) { printf ("#342 error in file ``.h'' :\n     predicate LNT type without any value in its domain\n     impossible iteration for type %s [%s:%d]\n", CAESAR_ADT_LOTOSNT_TYPE, __FILE__, __LINE__); fflush (stdout); raise (SIGTERM); } else ((void) 0)
#endif

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_ARGUMENT_TRACE
#define CAESAR_ADT_ARGUMENT_TRACE(CAESAR_ADT_I,CAESAR_ADT_ARGUMENT,CAESAR_ADT_PRINTER) {fprintf (stdout, "         argument %d = ", CAESAR_ADT_I); CAESAR_ADT_PRINTER (stdout, CAESAR_ADT_ARGUMENT); fprintf (stdout, "\n");}
#endif

/* ------------------------------------------------------------------------- */

/* LINTLIBRARY */

#define CAESAR_ADT_USE(CAESAR_ADT_0) (void) (CAESAR_ADT_0)
/* to keep "gcc -Wextra" silent */

/* ========================================================================= */

#define CAESAR_ADT_UNCANONICAL_ADT_EXCEPTION__NONE

#define CAESAR_ADT_STAR_ADT_EXCEPTION__NONE(CAESAR_ADT_0) (CAESAR_ADT_0)

 /* forward */ typedef struct CAESAR_ADT_STRUCT_ADT_EXCEPTION__NONE CAESAR_ADT_STAR_ADT_EXCEPTION__NONE (ADT_EXCEPTION__NONE);
 /* forward */ int CAESAR_ADT_CMP_ADT_EXCEPTION__NONE ();
 /* forward */ void CAESAR_ADT_PRT_ADT_EXCEPTION__NONE ();

/* ========================================================================= */

typedef unsigned char CAESAR_ADT_TYPE_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE;

#define CAESAR_ADT_SCALAR_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE

#ifndef lint
#define CAESAR_ADT_BITS_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE : 1
#endif

#ifndef CAESAR_ADT_SINGLETON
#define CAESAR_ADT_SINGLETON 0
#endif

/* ------------------------------------------------------------------------- */

#define COMPUTE__CASE__BRANCH__1__THREAD__66__CODE__0() ((CAESAR_ADT_TYPE_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE) CAESAR_ADT_SINGLETON)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_MATCH_COMPUTE__CASE__BRANCH__1__THREAD__66__CODE__0(CAESAR_ADT_0) (CAESAR_ADT_USE (CAESAR_ADT_0), 1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_CMP_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE(CAESAR_ADT_1,CAESAR_ADT_2) (CAESAR_ADT_USE (CAESAR_ADT_1), CAESAR_ADT_USE (CAESAR_ADT_2), 1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_PRT_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE(CAESAR_ADT_FILE,CAESAR_ADT_0) (CAESAR_ADT_USE (CAESAR_ADT_0), fprintf (CAESAR_ADT_FILE, "COMPUTE__CASE__BRANCH__1__THREAD__66__CODE__0"));

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_ITR_FIRST_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE
#define CAESAR_ADT_ITR_FIRST_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE() (CAESAR_ADT_SINGLETON)
#endif

#ifndef CAESAR_ADT_ITR_NEXT_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE
#define CAESAR_ADT_ITR_NEXT_COMPUTE__CASE__BRANCH__1__THREAD__66__TYPE(CAESAR_ADT_0) (CAESAR_ADT_USE (CAESAR_ADT_0), 0)
#endif

/* ========================================================================= */

#define CAESAR_ADT_STAR_INSTRUCTION(CAESAR_ADT_0) (CAESAR_ADT_0)

 /* forward */ typedef struct CAESAR_ADT_STRUCT_INSTRUCTION CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_TYPE_INSTRUCTION);
 /* forward */ int CAESAR_ADT_CMP_INSTRUCTION ();
 /* forward */ void CAESAR_ADT_PRT_INSTRUCTION ();

/* ========================================================================= */

#define CAESAR_ADT_UNCANONICAL_PROGRAM

#define CAESAR_ADT_STAR_PROGRAM(CAESAR_ADT_0) (*(CAESAR_ADT_0))

#define CAESAR_ADT_SCALAR_PROGRAM

 /* forward */ typedef struct CAESAR_ADT_STRUCT_PROGRAM CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_TYPE_PROGRAM);
 /* forward */ int CAESAR_ADT_CMP_PROGRAM ();
 /* forward */ void CAESAR_ADT_PRT_PROGRAM ();

/* ========================================================================= */

#define CAESAR_ADT_STAR_MEMARRAY(CAESAR_ADT_0) (CAESAR_ADT_0)

 /* forward */ typedef struct CAESAR_ADT_STRUCT_MEMARRAY CAESAR_ADT_STAR_MEMARRAY (CAESAR_ADT_TYPE_MEMARRAY);
 /* forward */ int CAESAR_ADT_CMP_MEMARRAY ();
 /* forward */ void CAESAR_ADT_PRT_MEMARRAY ();

/* ========================================================================= */

#define CAESAR_ADT_UNCANONICAL_NATSET

#define CAESAR_ADT_STAR_NATSET(CAESAR_ADT_0) (*(CAESAR_ADT_0))

#define CAESAR_ADT_SCALAR_NATSET

 /* forward */ typedef struct CAESAR_ADT_STRUCT_NATSET CAESAR_ADT_STAR_NATSET (CAESAR_ADT_TYPE_NATSET);
 /* forward */ int CAESAR_ADT_CMP_NATSET ();
 /* forward */ void CAESAR_ADT_PRT_NATSET ();

/* ========================================================================= */

#include "test_77_hsa_obe.t"

#define CAESAR_ADT_INCLUDE_T

/* CAUTION: there exists C types, comparison functions, enumeration functions and printing macros that can not be generated automatically by CAESAR.ADT, since the corresponding LOTOS sorts have no constructors. These C objects will be considered as extern and it is assumed that their definition is contained in file "test_77_hsa_obe.t" provided by the user. The list of these objects is given below: */

/* (1) the type ADT_STRING implementing sort STRING */
/* (2) the comparison function ADT_CMP_STRING for sort STRING */
/* (3) the enumeration macro CAESAR_ADT_ITR_FIRST_ADT_STRING for sort STRING */
/* (4) the enumeration macro CAESAR_ADT_ITR_NEXT_ADT_STRING for sort STRING */
/* (5) the printing function ADT_PRINT_STRING for sort STRING */

/* (6) the type ADT_NAT implementing sort NAT */
/* (7) the comparison function ADT_CMP_NAT for sort NAT */
/* (8) the enumeration macro ADT_ENUM_FIRST_NAT for sort NAT */
/* (9) the enumeration macro ADT_ENUM_NEXT_NAT for sort NAT */
/* (10) the printing function ADT_PRINT_NAT for sort NAT */
/* (11) the function ADT_N0 implementing constructor 0 */
/* (12) the testor function CAESAR_ADT_MATCH_ADT_N0 for constructor 0 */
/* (13) the function ADT_SUCC_NAT implementing constructor SUCC */
/* (14) the testor function CAESAR_ADT_MATCH_ADT_SUCC_NAT for constructor SUCC */
/* (15) the selector #1 function CAESAR_ADT_GET_1_ADT_SUCC_NAT for constructor SUCC */

/* (16) the type ADT_RANGE__MEMLOC implementing sort MEMLOC */
/* (17) the comparison function ADT_RANGE_CMP__MEMLOC for sort MEMLOC */
/* (18) the enumeration macro ADT_RANGE_ENUM_FIRST__MEMLOC for sort MEMLOC */
/* (19) the enumeration macro ADT_RANGE_ENUM_NEXT__MEMLOC for sort MEMLOC */
/* (20) the printing function ADT_RANGE_PRINT__MEMLOC for sort MEMLOC */
/* (21) the function ADT_RANGE_CONSTRUCTOR__MEMLOC implementing constructor CONSTRUCTOR__MEMLOC */
/* (22) the testor function CAESAR_ADT_MATCH_ADT_RANGE_CONSTRUCTOR__MEMLOC for constructor CONSTRUCTOR__MEMLOC */
/* (23) the selector #1 function CAESAR_ADT_GET_1_ADT_RANGE_CONSTRUCTOR__MEMLOC for constructor CONSTRUCTOR__MEMLOC */

/* (24) the type ADT_INT implementing sort INT */
/* (25) the comparison function ADT_CMP_INT for sort INT */
/* (26) the enumeration macro ADT_ENUM_FIRST_INT for sort INT */
/* (27) the enumeration macro ADT_ENUM_NEXT_INT for sort INT */
/* (28) the printing function ADT_PRINT_INT for sort INT */
/* (29) the function ADT_POS_INT implementing constructor POS */
/* (30) the testor function CAESAR_ADT_MATCH_ADT_POS_INT for constructor POS */
/* (31) the selector #1 function CAESAR_ADT_GET_1_ADT_POS_INT for constructor POS */
/* (32) the function ADT_NEG_INT implementing constructor NEG */
/* (33) the testor function CAESAR_ADT_MATCH_ADT_NEG_INT for constructor NEG */
/* (34) the selector #1 function CAESAR_ADT_GET_1_ADT_NEG_INT for constructor NEG */

/* (35) the type ADT_BOOL implementing sort BOOL */
/* (36) the comparison function ADT_CMP_BOOL for sort BOOL */
/* (37) the enumeration macro ADT_ENUM_FIRST_BOOL for sort BOOL */
/* (38) the enumeration macro ADT_ENUM_NEXT_BOOL for sort BOOL */
/* (39) the printing function ADT_PRINT_BOOL for sort BOOL */
/* (40) the function ADT_FALSE implementing constructor FALSE */
/* (41) the testor function CAESAR_ADT_MATCH_ADT_FALSE for constructor FALSE */
/* (42) the function ADT_TRUE implementing constructor TRUE */
/* (43) the testor function CAESAR_ADT_MATCH_ADT_TRUE for constructor TRUE */

/* (44) the type ADT_NUMBER implementing sort NUMBER */
/* (45) the comparison function ADT_CMP_NUMBER for sort NUMBER */
/* (46) the enumeration macro ADT_ENUM_FIRST_NUMBER for sort NUMBER */
/* (47) the enumeration macro ADT_ENUM_NEXT_NUMBER for sort NUMBER */
/* (48) the printing function ADT_PRINT_NUMBER for sort NUMBER */

/* (49) the type ADT_CHAR implementing sort CHAR */
/* (50) the comparison function ADT_CMP_CHAR for sort CHAR */
/* (51) the enumeration macro ADT_ENUM_FIRST_CHAR for sort CHAR */
/* (52) the enumeration macro ADT_ENUM_NEXT_CHAR for sort CHAR */
/* (53) the printing function ADT_PRINT_CHAR for sort CHAR */

/* (54) the type ADT_REAL implementing sort REAL */
/* (55) the comparison function ADT_CMP_REAL for sort REAL */
/* (56) the enumeration macro CAESAR_ADT_ITR_FIRST_ADT_REAL for sort REAL */
/* (57) the enumeration macro CAESAR_ADT_ITR_NEXT_ADT_REAL for sort REAL */
/* (58) the printing function ADT_PRINT_REAL for sort REAL */

/* (59) the type ADT_ACTION implementing sort ACTION */
/* (60) the comparison function ADT_CMP_ACTION for sort ACTION */
/* (61) the enumeration macro CAESAR_ADT_ITR_FIRST_ADT_ACTION for sort ACTION */
/* (62) the enumeration macro CAESAR_ADT_ITR_NEXT_ADT_ACTION for sort ACTION */
/* (63) the printing function ADT_PRINT_ACTION for sort ACTION */

/* ========================================================================= */

typedef struct CAESAR_ADT_STRUCT_ADT_EXCEPTION__NONE {
ADT_STRING CAESAR_ADT_1_ADT_EXCEPTION__NONE__CONSTRUCTOR
#ifdef CAESAR_ADT_BITS_ADT_STRING
CAESAR_ADT_BITS_ADT_STRING
#endif
;
} CAESAR_ADT_BODY_ADT_EXCEPTION__NONE;

/* ========================================================================= */

typedef struct CAESAR_ADT_STRUCT_INSTRUCTION {
ADT_INT CAESAR_ADT_2_ATOMIC_EXCH_BRANCH
#ifdef CAESAR_ADT_BITS_ADT_INT
CAESAR_ADT_BITS_ADT_INT
#endif
;
ADT_INT CAESAR_ADT_4_ATOMIC_EXCH_BRANCH
#ifdef CAESAR_ADT_BITS_ADT_INT
CAESAR_ADT_BITS_ADT_INT
#endif
;
ADT_NAT CAESAR_ADT_5_ATOMIC_EXCH_BRANCH
#ifdef CAESAR_ADT_BITS_ADT_NAT
CAESAR_ADT_BITS_ADT_NAT
#endif
;
ADT_RANGE__MEMLOC CAESAR_ADT_1_ATOMIC_EXCH_BRANCH
#ifdef CAESAR_ADT_BITS_ADT_RANGE__MEMLOC
CAESAR_ADT_BITS_ADT_RANGE__MEMLOC
#endif
;
ADT_BOOL CAESAR_ADT_3_ATOMIC_EXCH_BRANCH
#ifdef CAESAR_ADT_BITS_ADT_BOOL
CAESAR_ADT_BITS_ADT_BOOL
#endif
;
ADT_BOOL CAESAR_ADT_6_ATOMIC_EXCH_BRANCH
#ifdef CAESAR_ADT_BITS_ADT_BOOL
CAESAR_ADT_BITS_ADT_BOOL
#endif
;
} CAESAR_ADT_BODY_INSTRUCTION;

/* ========================================================================= */

typedef struct CAESAR_ADT_STRUCT_MEMARRAY {
ADT_INT CAESAR_ADT_1_MEMARRAY
#ifdef CAESAR_ADT_BITS_ADT_INT
CAESAR_ADT_BITS_ADT_INT
#endif
;
} CAESAR_ADT_BODY_MEMARRAY;

/* ========================================================================= */

#define CAESAR_ADT_CASE_NIL__1 ((unsigned char) 0)
#define CAESAR_ADT_CASE_CONS__1 ((unsigned char) 1)

typedef struct CAESAR_ADT_STRUCT_PROGRAM {
unsigned char CAESAR_ADT_ENUM_PROGRAM
#ifndef lint
 : 1
#endif
;
union {
struct {
CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_1_CONS__1
#ifdef CAESAR_ADT_BITS_INSTRUCTION
CAESAR_ADT_BITS_INSTRUCTION
#endif
;
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_2_CONS__1
#ifdef CAESAR_ADT_BITS_PROGRAM
CAESAR_ADT_BITS_PROGRAM
#endif
;
} CAESAR_ADT_FIELD_CONS__1;
} CAESAR_ADT_UNION_PROGRAM;
} CAESAR_ADT_BODY_PROGRAM;

/* ========================================================================= */

#define CAESAR_ADT_CASE_NIL ((unsigned char) 0)
#define CAESAR_ADT_CASE_CONS ((unsigned char) 1)

typedef struct CAESAR_ADT_STRUCT_NATSET {
unsigned char CAESAR_ADT_ENUM_NATSET
#ifndef lint
 : 1
#endif
;
union {
struct {
ADT_NAT CAESAR_ADT_1_CONS
#ifdef CAESAR_ADT_BITS_ADT_NAT
CAESAR_ADT_BITS_ADT_NAT
#endif
;
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_2_CONS
#ifdef CAESAR_ADT_BITS_NATSET
CAESAR_ADT_BITS_NATSET
#endif
;
} CAESAR_ADT_FIELD_CONS;
} CAESAR_ADT_UNION_NATSET;
} CAESAR_ADT_BODY_NATSET;

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

int CAESAR_ADT_CMP_ADT_EXCEPTION__NONE (CAESAR_ADT_1, CAESAR_ADT_2)
ADT_EXCEPTION__NONE CAESAR_ADT_1;
ADT_EXCEPTION__NONE CAESAR_ADT_2;
{
return ADT_CMP_STRING (CAESAR_ADT_STAR_ADT_EXCEPTION__NONE (CAESAR_ADT_1).CAESAR_ADT_1_ADT_EXCEPTION__NONE__CONSTRUCTOR, CAESAR_ADT_STAR_ADT_EXCEPTION__NONE (CAESAR_ADT_2).CAESAR_ADT_1_ADT_EXCEPTION__NONE__CONSTRUCTOR) ;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

#ifndef CAESAR_ADT_PRINT_OPEN_ADT_EXCEPTION__NONE
#define CAESAR_ADT_PRINT_OPEN_ADT_EXCEPTION__NONE "EXCEPTION__NONE__CONSTRUCTOR ("
#endif

#ifndef CAESAR_ADT_PRINT_CLOSE_ADT_EXCEPTION__NONE
#define CAESAR_ADT_PRINT_CLOSE_ADT_EXCEPTION__NONE ")"
#endif

void CAESAR_ADT_PRT_ADT_EXCEPTION__NONE (CAESAR_ADT_FILE, CAESAR_ADT_0)
FILE *CAESAR_ADT_FILE;
ADT_EXCEPTION__NONE CAESAR_ADT_0;
{
fprintf (CAESAR_ADT_FILE, "%s", CAESAR_ADT_PRINT_OPEN_ADT_EXCEPTION__NONE);
ADT_PRINT_STRING (CAESAR_ADT_FILE, CAESAR_ADT_STAR_ADT_EXCEPTION__NONE (CAESAR_ADT_0).CAESAR_ADT_1_ADT_EXCEPTION__NONE__CONSTRUCTOR);
 fprintf (CAESAR_ADT_FILE, "%s", CAESAR_ADT_PRINT_CLOSE_ADT_EXCEPTION__NONE);
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifdef CAESAR_ADT_INTERFACE

extern ADT_EXCEPTION__NONE ADT_EXCEPTION__NONE__CONSTRUCTOR();

#else

ADT_EXCEPTION__NONE ADT_EXCEPTION__NONE__CONSTRUCTOR(CAESAR_ADT_1)
ADT_STRING CAESAR_ADT_1;
{
ADT_EXCEPTION__NONE CAESAR_ADT_0;
#ifndef CAESAR_USE_STRUCT_ASSIGNMENT
memset ((void *) &(CAESAR_ADT_STAR_ADT_EXCEPTION__NONE (CAESAR_ADT_0)), 0, sizeof (CAESAR_ADT_BODY_ADT_EXCEPTION__NONE));
#endif
CAESAR_ADT_STAR_ADT_EXCEPTION__NONE (CAESAR_ADT_0).CAESAR_ADT_1_ADT_EXCEPTION__NONE__CONSTRUCTOR = CAESAR_ADT_1;
return CAESAR_ADT_0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_MATCH_ADT_EXCEPTION__NONE__CONSTRUCTOR(CAESAR_ADT_0) 1
#define CAESAR_ADT_GET_1_ADT_EXCEPTION__NONE__CONSTRUCTOR(CAESAR_ADT_0) (CAESAR_ADT_STAR_ADT_EXCEPTION__NONE (CAESAR_ADT_0).CAESAR_ADT_1_ADT_EXCEPTION__NONE__CONSTRUCTOR)

/* ------------------------------------------------------------------------- */

/* sort EXCEPTION__NONE is infinite: no iterator can be generated automatically for this sort; however, it is possible to specify manually an iterator for a finite subset of EXCEPTION__NONE by defining two macros CAESAR_ADT_ITR_FIRST_ADT_EXCEPTION__NONE() and CAESAR_ADT_ITR_NEXT_ADT_EXCEPTION__NONE() in file "test_77_hsa_obe.t" */

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

int CAESAR_ADT_CMP_INSTRUCTION (CAESAR_ADT_1, CAESAR_ADT_2)
CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_1;
CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_2;
{
return ADT_RANGE_CMP__MEMLOC (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_1).CAESAR_ADT_1_ATOMIC_EXCH_BRANCH, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_2).CAESAR_ADT_1_ATOMIC_EXCH_BRANCH) &&
ADT_CMP_INT (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_1).CAESAR_ADT_2_ATOMIC_EXCH_BRANCH, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_2).CAESAR_ADT_2_ATOMIC_EXCH_BRANCH) &&
ADT_CMP_BOOL (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_1).CAESAR_ADT_3_ATOMIC_EXCH_BRANCH, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_2).CAESAR_ADT_3_ATOMIC_EXCH_BRANCH) &&
ADT_CMP_INT (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_1).CAESAR_ADT_4_ATOMIC_EXCH_BRANCH, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_2).CAESAR_ADT_4_ATOMIC_EXCH_BRANCH) &&
ADT_CMP_NAT (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_1).CAESAR_ADT_5_ATOMIC_EXCH_BRANCH, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_2).CAESAR_ADT_5_ATOMIC_EXCH_BRANCH) &&
ADT_CMP_BOOL (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_1).CAESAR_ADT_6_ATOMIC_EXCH_BRANCH, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_2).CAESAR_ADT_6_ATOMIC_EXCH_BRANCH) ;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

#ifndef CAESAR_ADT_PRINT_OPEN_INSTRUCTION
#define CAESAR_ADT_PRINT_OPEN_INSTRUCTION "ATOMIC_EXCH_BRANCH ("
#endif

#ifndef CAESAR_ADT_PRINT_CLOSE_INSTRUCTION
#define CAESAR_ADT_PRINT_CLOSE_INSTRUCTION ")"
#endif

void CAESAR_ADT_PRT_INSTRUCTION (CAESAR_ADT_FILE, CAESAR_ADT_0)
FILE *CAESAR_ADT_FILE;
CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_0;
{
fprintf (CAESAR_ADT_FILE, "%s", CAESAR_ADT_PRINT_OPEN_INSTRUCTION);
ADT_RANGE_PRINT__MEMLOC (CAESAR_ADT_FILE, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_1_ATOMIC_EXCH_BRANCH);
 fprintf (CAESAR_ADT_FILE, ", ");
ADT_PRINT_INT (CAESAR_ADT_FILE, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_2_ATOMIC_EXCH_BRANCH);
 fprintf (CAESAR_ADT_FILE, ", ");
ADT_PRINT_BOOL (CAESAR_ADT_FILE, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_3_ATOMIC_EXCH_BRANCH);
 fprintf (CAESAR_ADT_FILE, ", ");
ADT_PRINT_INT (CAESAR_ADT_FILE, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_4_ATOMIC_EXCH_BRANCH);
 fprintf (CAESAR_ADT_FILE, ", ");
ADT_PRINT_NAT (CAESAR_ADT_FILE, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_5_ATOMIC_EXCH_BRANCH);
 fprintf (CAESAR_ADT_FILE, ", ");
ADT_PRINT_BOOL (CAESAR_ADT_FILE, CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_6_ATOMIC_EXCH_BRANCH);
 fprintf (CAESAR_ADT_FILE, "%s", CAESAR_ADT_PRINT_CLOSE_INSTRUCTION);
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifdef CAESAR_ADT_INTERFACE

extern CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH();

#else

CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1, CAESAR_ADT_2, CAESAR_ADT_3, CAESAR_ADT_4, CAESAR_ADT_5, CAESAR_ADT_6)
ADT_RANGE__MEMLOC CAESAR_ADT_1;
ADT_INT CAESAR_ADT_2;
ADT_BOOL CAESAR_ADT_3;
ADT_INT CAESAR_ADT_4;
ADT_NAT CAESAR_ADT_5;
ADT_BOOL CAESAR_ADT_6;
{
CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_0;
memset ((void *) (&CAESAR_ADT_0), 0, sizeof (CAESAR_ADT_TYPE_INSTRUCTION));
CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_1_ATOMIC_EXCH_BRANCH = CAESAR_ADT_1;
CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_2_ATOMIC_EXCH_BRANCH = CAESAR_ADT_2;
CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_3_ATOMIC_EXCH_BRANCH = CAESAR_ADT_3;
CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_4_ATOMIC_EXCH_BRANCH = CAESAR_ADT_4;
CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_5_ATOMIC_EXCH_BRANCH = CAESAR_ADT_5;
CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_6_ATOMIC_EXCH_BRANCH = CAESAR_ADT_6;
return CAESAR_ADT_0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_MATCH_ATOMIC_EXCH_BRANCH(CAESAR_ADT_0) 1
#define CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH(CAESAR_ADT_0) (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_1_ATOMIC_EXCH_BRANCH)
#define CAESAR_ADT_GET_2_ATOMIC_EXCH_BRANCH(CAESAR_ADT_0) (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_2_ATOMIC_EXCH_BRANCH)
#define CAESAR_ADT_GET_3_ATOMIC_EXCH_BRANCH(CAESAR_ADT_0) (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_3_ATOMIC_EXCH_BRANCH)
#define CAESAR_ADT_GET_4_ATOMIC_EXCH_BRANCH(CAESAR_ADT_0) (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_4_ATOMIC_EXCH_BRANCH)
#define CAESAR_ADT_GET_5_ATOMIC_EXCH_BRANCH(CAESAR_ADT_0) (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_5_ATOMIC_EXCH_BRANCH)
#define CAESAR_ADT_GET_6_ATOMIC_EXCH_BRANCH(CAESAR_ADT_0) (CAESAR_ADT_STAR_INSTRUCTION (CAESAR_ADT_0).CAESAR_ADT_6_ATOMIC_EXCH_BRANCH)

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_ITR_FIRST_INSTRUCTION
#define CAESAR_ADT_ITR_FIRST_INSTRUCTION() CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH (ADT_RANGE_ENUM_FIRST__MEMLOC (), ADT_ENUM_FIRST_INT (), ADT_ENUM_FIRST_BOOL (), ADT_ENUM_FIRST_INT (), ADT_ENUM_FIRST_NAT (), ADT_ENUM_FIRST_BOOL ())
#endif

#ifndef CAESAR_ADT_ITR_NEXT_INSTRUCTION
#define CAESAR_ADT_ITR_NEXT_INSTRUCTION(CAESAR_ADT_0) CAESAR_ADT_ITRFUNC_NEXT_INSTRUCTION (&(CAESAR_ADT_0))
#endif

#ifdef CAESAR_ADT_INTERFACE

extern int CAESAR_ADT_ITRFUNC_NEXT_INSTRUCTION ();

#else

int CAESAR_ADT_ITRFUNC_NEXT_INSTRUCTION (CAESAR_ADT_0)
CAESAR_ADT_TYPE_INSTRUCTION *CAESAR_ADT_0;
{
{
ADT_BOOL CAESAR_ADT_6;
CAESAR_ADT_6 = CAESAR_ADT_GET_6_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0);
if (ADT_ENUM_NEXT_BOOL (CAESAR_ADT_6))
{
*CAESAR_ADT_0 = CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH (CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_2_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_3_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_4_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_5_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_6);
return 1;
}
}
{
ADT_NAT CAESAR_ADT_5;
CAESAR_ADT_5 = CAESAR_ADT_GET_5_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0);
if (ADT_ENUM_NEXT_NAT (CAESAR_ADT_5))
{
*CAESAR_ADT_0 = CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH (CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_2_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_3_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_4_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_5, ADT_ENUM_FIRST_BOOL ());
return 1;
}
}
{
ADT_INT CAESAR_ADT_4;
CAESAR_ADT_4 = CAESAR_ADT_GET_4_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0);
if (ADT_ENUM_NEXT_INT (CAESAR_ADT_4))
{
*CAESAR_ADT_0 = CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH (CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_2_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_3_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_4, ADT_ENUM_FIRST_NAT (), ADT_ENUM_FIRST_BOOL ());
return 1;
}
}
{
ADT_BOOL CAESAR_ADT_3;
CAESAR_ADT_3 = CAESAR_ADT_GET_3_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0);
if (ADT_ENUM_NEXT_BOOL (CAESAR_ADT_3))
{
*CAESAR_ADT_0 = CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH (CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_GET_2_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_3, ADT_ENUM_FIRST_INT (), ADT_ENUM_FIRST_NAT (), ADT_ENUM_FIRST_BOOL ());
return 1;
}
}
{
ADT_INT CAESAR_ADT_2;
CAESAR_ADT_2 = CAESAR_ADT_GET_2_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0);
if (ADT_ENUM_NEXT_INT (CAESAR_ADT_2))
{
*CAESAR_ADT_0 = CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH (CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0), CAESAR_ADT_2, ADT_ENUM_FIRST_BOOL (), ADT_ENUM_FIRST_INT (), ADT_ENUM_FIRST_NAT (), ADT_ENUM_FIRST_BOOL ());
return 1;
}
}
{
ADT_RANGE__MEMLOC CAESAR_ADT_1;
CAESAR_ADT_1 = CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH (*CAESAR_ADT_0);
if (ADT_RANGE_ENUM_NEXT__MEMLOC (CAESAR_ADT_1))
{
*CAESAR_ADT_0 = CAESAR_ADT_FUNC_ATOMIC_EXCH_BRANCH (CAESAR_ADT_1, ADT_ENUM_FIRST_INT (), ADT_ENUM_FIRST_BOOL (), ADT_ENUM_FIRST_INT (), ADT_ENUM_FIRST_NAT (), ADT_ENUM_FIRST_BOOL ());
return 1;
}
}
return 0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

int CAESAR_ADT_CMP_PROGRAM (CAESAR_ADT_1, CAESAR_ADT_2)
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_1;
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_2;
{
if ((CAESAR_ADT_1 == NULL) || (CAESAR_ADT_2 == NULL)) return (CAESAR_ADT_1 == CAESAR_ADT_2);
if (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_1).CAESAR_ADT_ENUM_PROGRAM != CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_2).CAESAR_ADT_ENUM_PROGRAM) return 0;
switch (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_1).CAESAR_ADT_ENUM_PROGRAM) {
case CAESAR_ADT_CASE_NIL__1:
return 1;
case CAESAR_ADT_CASE_CONS__1:
return CAESAR_ADT_CMP_INSTRUCTION (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_1).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_1_CONS__1, CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_2).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_1_CONS__1) &&
CAESAR_ADT_CMP_PROGRAM (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_1).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_2_CONS__1, CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_2).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_2_CONS__1) ;
}
/* NOTREACHED */
#ifdef __GNUC__
return 0; /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

void CAESAR_ADT_PRT_PROGRAM (CAESAR_ADT_FILE, CAESAR_ADT_0)
FILE *CAESAR_ADT_FILE;
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_0;
{
int CAESAR_ADT_FIRST;
if (CAESAR_ADT_0 == NULL)
 fprintf (CAESAR_ADT_FILE, "?");
 else
{
fprintf (CAESAR_ADT_FILE, "{");
CAESAR_ADT_FIRST = 1;
while (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_ENUM_PROGRAM == CAESAR_ADT_CASE_CONS__1) {
if (CAESAR_ADT_FIRST)
CAESAR_ADT_FIRST = 0;
else
fprintf (CAESAR_ADT_FILE, ", ");
CAESAR_ADT_PRT_INSTRUCTION (CAESAR_ADT_FILE, CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_1_CONS__1);
CAESAR_ADT_0 = CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_2_CONS__1;
}
fprintf (CAESAR_ADT_FILE, "}");
}
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifdef CAESAR_ADT_INTERFACE

extern CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_FUNC_NIL__1 ();

#else

CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_FUNC_NIL__1()
{
static CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_0 = NULL;
if (CAESAR_ADT_0 == NULL) {
CAESAR_ADT_ALLOC (CAESAR_ADT_0, CAESAR_ADT_BODY_PROGRAM, CAESAR_ADT_TYPE_PROGRAM, "NIL [COMMON:50]", "CAESAR_ADT_FUNC_NIL__1");
#ifndef CAESAR_USE_STRUCT_ASSIGNMENT
memset ((void *) &(CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0)), 0, sizeof (CAESAR_ADT_BODY_PROGRAM));
#endif
CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_ENUM_PROGRAM = CAESAR_ADT_CASE_NIL__1;
 }
return CAESAR_ADT_0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifdef CAESAR_ADT_INTERFACE

extern CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_FUNC_CONS__1 ();

#else

CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_FUNC_CONS__1(CAESAR_ADT_1, CAESAR_ADT_2)
CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_1;
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_2;
{
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_0;
CAESAR_ADT_ALLOC (CAESAR_ADT_0, CAESAR_ADT_BODY_PROGRAM, CAESAR_ADT_TYPE_PROGRAM, "CONS [COMMON:51]", "CAESAR_ADT_FUNC_CONS__1");
#ifndef CAESAR_USE_STRUCT_ASSIGNMENT
memset ((void *) &(CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0)), 0, sizeof (CAESAR_ADT_BODY_PROGRAM));
#endif
CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_ENUM_PROGRAM = CAESAR_ADT_CASE_CONS__1;
 CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_1_CONS__1 = CAESAR_ADT_1;
 CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_2_CONS__1 = CAESAR_ADT_2;
 return CAESAR_ADT_0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_MATCH_NIL__1(CAESAR_ADT_0) (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_ENUM_PROGRAM == CAESAR_ADT_CASE_NIL__1)
#define CAESAR_ADT_MATCH_CONS__1(CAESAR_ADT_0) (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_ENUM_PROGRAM == CAESAR_ADT_CASE_CONS__1)
#define CAESAR_ADT_GET_1_CONS__1(CAESAR_ADT_0) (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_1_CONS__1)
#define CAESAR_ADT_GET_2_CONS__1(CAESAR_ADT_0) (CAESAR_ADT_STAR_PROGRAM (CAESAR_ADT_0).CAESAR_ADT_UNION_PROGRAM.CAESAR_ADT_FIELD_CONS__1.CAESAR_ADT_2_CONS__1)

/* ------------------------------------------------------------------------- */

/* sort PROGRAM is infinite: no iterator can be generated automatically for this sort; however, it is possible to specify manually an iterator for a finite subset of PROGRAM by defining two macros CAESAR_ADT_ITR_FIRST_PROGRAM() and CAESAR_ADT_ITR_NEXT_PROGRAM() in file "test_77_hsa_obe.t" */

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

int CAESAR_ADT_CMP_MEMARRAY (CAESAR_ADT_1, CAESAR_ADT_2)
CAESAR_ADT_TYPE_MEMARRAY CAESAR_ADT_1;
CAESAR_ADT_TYPE_MEMARRAY CAESAR_ADT_2;
{
return ADT_CMP_INT (CAESAR_ADT_STAR_MEMARRAY (CAESAR_ADT_1).CAESAR_ADT_1_MEMARRAY, CAESAR_ADT_STAR_MEMARRAY (CAESAR_ADT_2).CAESAR_ADT_1_MEMARRAY) ;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

#ifndef CAESAR_ADT_PRINT_OPEN_MEMARRAY
#define CAESAR_ADT_PRINT_OPEN_MEMARRAY "MEMARRAY ("
#endif

#ifndef CAESAR_ADT_PRINT_CLOSE_MEMARRAY
#define CAESAR_ADT_PRINT_CLOSE_MEMARRAY ")"
#endif

void CAESAR_ADT_PRT_MEMARRAY (CAESAR_ADT_FILE, CAESAR_ADT_0)
FILE *CAESAR_ADT_FILE;
CAESAR_ADT_TYPE_MEMARRAY CAESAR_ADT_0;
{
fprintf (CAESAR_ADT_FILE, "%s", CAESAR_ADT_PRINT_OPEN_MEMARRAY);
ADT_PRINT_INT (CAESAR_ADT_FILE, CAESAR_ADT_STAR_MEMARRAY (CAESAR_ADT_0).CAESAR_ADT_1_MEMARRAY);
 fprintf (CAESAR_ADT_FILE, "%s", CAESAR_ADT_PRINT_CLOSE_MEMARRAY);
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifdef CAESAR_ADT_INTERFACE

extern CAESAR_ADT_TYPE_MEMARRAY CAESAR_ADT_FUNC_MEMARRAY();

#else

CAESAR_ADT_TYPE_MEMARRAY CAESAR_ADT_FUNC_MEMARRAY(CAESAR_ADT_1)
ADT_INT CAESAR_ADT_1;
{
CAESAR_ADT_TYPE_MEMARRAY CAESAR_ADT_0;
memset ((void *) (&CAESAR_ADT_0), 0, sizeof (CAESAR_ADT_TYPE_MEMARRAY));
CAESAR_ADT_STAR_MEMARRAY (CAESAR_ADT_0).CAESAR_ADT_1_MEMARRAY = CAESAR_ADT_1;
return CAESAR_ADT_0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_MATCH_MEMARRAY(CAESAR_ADT_0) 1
#define CAESAR_ADT_GET_1_MEMARRAY(CAESAR_ADT_0) (CAESAR_ADT_STAR_MEMARRAY (CAESAR_ADT_0).CAESAR_ADT_1_MEMARRAY)

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_ITR_FIRST_MEMARRAY
#define CAESAR_ADT_ITR_FIRST_MEMARRAY() CAESAR_ADT_FUNC_MEMARRAY (ADT_ENUM_FIRST_INT ())
#endif

#ifndef CAESAR_ADT_ITR_NEXT_MEMARRAY
#define CAESAR_ADT_ITR_NEXT_MEMARRAY(CAESAR_ADT_0) CAESAR_ADT_ITRFUNC_NEXT_MEMARRAY (&(CAESAR_ADT_0))
#endif

#ifdef CAESAR_ADT_INTERFACE

extern int CAESAR_ADT_ITRFUNC_NEXT_MEMARRAY ();

#else

int CAESAR_ADT_ITRFUNC_NEXT_MEMARRAY (CAESAR_ADT_0)
CAESAR_ADT_TYPE_MEMARRAY *CAESAR_ADT_0;
{
{
ADT_INT CAESAR_ADT_1;
CAESAR_ADT_1 = CAESAR_ADT_GET_1_MEMARRAY (*CAESAR_ADT_0);
if (ADT_ENUM_NEXT_INT (CAESAR_ADT_1))
{
*CAESAR_ADT_0 = CAESAR_ADT_FUNC_MEMARRAY (CAESAR_ADT_1);
return 1;
}
}
return 0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

int CAESAR_ADT_CMP_NATSET (CAESAR_ADT_1, CAESAR_ADT_2)
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_1;
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_2;
{
if ((CAESAR_ADT_1 == NULL) || (CAESAR_ADT_2 == NULL)) return (CAESAR_ADT_1 == CAESAR_ADT_2);
if (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_1).CAESAR_ADT_ENUM_NATSET != CAESAR_ADT_STAR_NATSET (CAESAR_ADT_2).CAESAR_ADT_ENUM_NATSET) return 0;
switch (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_1).CAESAR_ADT_ENUM_NATSET) {
case CAESAR_ADT_CASE_NIL:
return 1;
case CAESAR_ADT_CASE_CONS:
return ADT_CMP_NAT (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_1).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_1_CONS, CAESAR_ADT_STAR_NATSET (CAESAR_ADT_2).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_1_CONS) &&
CAESAR_ADT_CMP_NATSET (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_1).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_2_CONS, CAESAR_ADT_STAR_NATSET (CAESAR_ADT_2).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_2_CONS) ;
}
/* NOTREACHED */
#ifdef __GNUC__
return 0; /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

void CAESAR_ADT_PRT_NATSET (CAESAR_ADT_FILE, CAESAR_ADT_0)
FILE *CAESAR_ADT_FILE;
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_0;
{
int CAESAR_ADT_FIRST;
if (CAESAR_ADT_0 == NULL)
 fprintf (CAESAR_ADT_FILE, "?");
 else
{
fprintf (CAESAR_ADT_FILE, "{");
CAESAR_ADT_FIRST = 1;
while (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_ENUM_NATSET == CAESAR_ADT_CASE_CONS) {
if (CAESAR_ADT_FIRST)
CAESAR_ADT_FIRST = 0;
else
fprintf (CAESAR_ADT_FILE, ", ");
ADT_PRINT_NAT (CAESAR_ADT_FILE, CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_1_CONS);
CAESAR_ADT_0 = CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_2_CONS;
}
fprintf (CAESAR_ADT_FILE, "}");
}
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifdef CAESAR_ADT_INTERFACE

extern CAESAR_ADT_TYPE_NATSET CAESAR_ADT_FUNC_NIL ();

#else

CAESAR_ADT_TYPE_NATSET CAESAR_ADT_FUNC_NIL()
{
static CAESAR_ADT_TYPE_NATSET CAESAR_ADT_0 = NULL;
if (CAESAR_ADT_0 == NULL) {
CAESAR_ADT_ALLOC (CAESAR_ADT_0, CAESAR_ADT_BODY_NATSET, CAESAR_ADT_TYPE_NATSET, "NIL [COMMON:12]", "CAESAR_ADT_FUNC_NIL");
#ifndef CAESAR_USE_STRUCT_ASSIGNMENT
memset ((void *) &(CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0)), 0, sizeof (CAESAR_ADT_BODY_NATSET));
#endif
CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_ENUM_NATSET = CAESAR_ADT_CASE_NIL;
 }
return CAESAR_ADT_0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifdef CAESAR_ADT_INTERFACE

extern CAESAR_ADT_TYPE_NATSET CAESAR_ADT_FUNC_CONS ();

#else

CAESAR_ADT_TYPE_NATSET CAESAR_ADT_FUNC_CONS(CAESAR_ADT_1, CAESAR_ADT_2)
ADT_NAT CAESAR_ADT_1;
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_2;
{
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_0;
CAESAR_ADT_ALLOC (CAESAR_ADT_0, CAESAR_ADT_BODY_NATSET, CAESAR_ADT_TYPE_NATSET, "CONS [COMMON:13]", "CAESAR_ADT_FUNC_CONS");
#ifndef CAESAR_USE_STRUCT_ASSIGNMENT
memset ((void *) &(CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0)), 0, sizeof (CAESAR_ADT_BODY_NATSET));
#endif
CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_ENUM_NATSET = CAESAR_ADT_CASE_CONS;
 CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_1_CONS = CAESAR_ADT_1;
 CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_2_CONS = CAESAR_ADT_2;
 return CAESAR_ADT_0;
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_MATCH_NIL(CAESAR_ADT_0) (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_ENUM_NATSET == CAESAR_ADT_CASE_NIL)
#define CAESAR_ADT_MATCH_CONS(CAESAR_ADT_0) (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_ENUM_NATSET == CAESAR_ADT_CASE_CONS)
#define CAESAR_ADT_GET_1_CONS(CAESAR_ADT_0) (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_1_CONS)
#define CAESAR_ADT_GET_2_CONS(CAESAR_ADT_0) (CAESAR_ADT_STAR_NATSET (CAESAR_ADT_0).CAESAR_ADT_UNION_NATSET.CAESAR_ADT_FIELD_CONS.CAESAR_ADT_2_CONS)

/* ------------------------------------------------------------------------- */

/* sort NATSET is infinite: no iterator can be generated automatically for this sort; however, it is possible to specify manually an iterator for a finite subset of NATSET by defining two macros CAESAR_ADT_ITR_FIRST_NATSET() and CAESAR_ADT_ITR_NEXT_NATSET() in file "test_77_hsa_obe.t" */

/* ========================================================================= */

 /* forward */ ADT_NAT CAESAR_ADT_FUNC_GET__1__1 ();

/* ------------------------------------------------------------------------- */

 /* forward */ CAESAR_ADT_TYPE_NATSET CAESAR_ADT_FUNC_DELETE ();
 /* forward */ CAESAR_ADT_TYPE_NATSET INSERT__NATSET__GENERATED ();
 /* forward */ ADT_NAT CAESAR_ADT_FUNC_LENGTH__1 ();
 /* forward */ ADT_BOOL CAESAR_ADT_FUNC_MEMBER ();
 /* forward */ ADT_NAT CAESAR_ADT_FUNC_GET__1__2 ();
 /* forward */ CAESAR_ADT_TYPE_NATSET CAESAR_ADT_FUNC_GET__2 ();
 /* forward */ ADT_INT ARRAY__GET__MEMARRAY__GENERATED ();
 /* forward */ CAESAR_ADT_TYPE_MEMARRAY ARRAY__SET__MEMARRAY__GENERATED ();
 /* forward */ ADT_RANGE__MEMLOC ADT_RANGE_CAST__MEMLOC__GENERATED ();
 /* forward */ CAESAR_ADT_TYPE_INSTRUCTION ADT_ACCESS__PROGRAM__GENERATED ();
 /* forward */ ADT_NAT CAESAR_ADT_FUNC_LENGTH__2 ();
 /* forward */ CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_FUNC_GET__1__5 ();
 /* forward */ CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_FUNC_GET__2__2 ();

ADT_NAT CAESAR_ADT_CONSTANT_NUMMEMLOC;
#define CAESAR_ADT_FUNC_NUMMEMLOC() CAESAR_ADT_CONSTANT_NUMMEMLOC

ADT_BOOL CAESAR_ADT_CONSTANT_CHECK__CHANNEL__NONE;
#define CAESAR_ADT_FUNC_CHECK__CHANNEL__NONE() CAESAR_ADT_CONSTANT_CHECK__CHANNEL__NONE

/* ========================================================================= */

#define CAESAR_ADT_FUNC_REMOVE(CAESAR_ADT_1, CAESAR_ADT_2) CAESAR_ADT_FUNC_DELETE (CAESAR_ADT_1, CAESAR_ADT_2)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_GET__1__3(CAESAR_ADT_1) CAESAR_ADT_GET_1_MEMARRAY(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_NAT(CAESAR_ADT_1) CAESAR_ADT_GET_1_ADT_RANGE_CONSTRUCTOR__MEMLOC(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_MEMLOC__1(CAESAR_ADT_1) CAESAR_ADT_1

/* ------------------------------------------------------------------------- */

#define GET_CHECK_LOC__INSTRUCTION__GENERATED(CAESAR_ADT_1) CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define GET_EXCH_VAL__INSTRUCTION__GENERATED(CAESAR_ADT_1) CAESAR_ADT_GET_2_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define GET_DO_EXCH__INSTRUCTION__GENERATED(CAESAR_ADT_1) CAESAR_ADT_GET_3_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define GET_CHECK_VAL__INSTRUCTION__GENERATED(CAESAR_ADT_1) CAESAR_ADT_GET_4_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define GET_BRANCH_TARGET__INSTRUCTION__GENERATED(CAESAR_ADT_1) CAESAR_ADT_GET_5_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define GET_DO_BRANCH__INSTRUCTION__GENERATED(CAESAR_ADT_1) CAESAR_ADT_GET_6_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_GET__1__4(CAESAR_ADT_1) CAESAR_ADT_GET_1_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_GET__2__1(CAESAR_ADT_1) CAESAR_ADT_GET_2_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_GET__3(CAESAR_ADT_1) CAESAR_ADT_GET_3_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_GET__4(CAESAR_ADT_1) CAESAR_ADT_GET_4_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_GET__5(CAESAR_ADT_1) CAESAR_ADT_GET_5_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_GET__6(CAESAR_ADT_1) CAESAR_ADT_GET_6_ATOMIC_EXCH_BRANCH(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_CHECK__CHANNEL__NATCHAN(CAESAR_ADT_1) (CAESAR_ADT_USE (CAESAR_ADT_1), ADT_TRUE ())

/* ------------------------------------------------------------------------- */

#define CAESAR_ADT_FUNC_CHECK__CHANNEL__EXCHAN(CAESAR_ADT_1, CAESAR_ADT_2) (CAESAR_ADT_USE (CAESAR_ADT_2), CAESAR_ADT_USE (CAESAR_ADT_1), ADT_TRUE ())

/* ========================================================================= */

#define CAESAR_ADT_FUNC_COMPUTE__CASE__BRANCH__1__THREAD__66(CAESAR_ADT_1) COMPUTE__CASE__BRANCH__1__THREAD__66__CODE__0 ()

/* ========================================================================= */

#define CAESAR_ADT_FUNC_COMMUNICATION__MATCH__0(CAESAR_ADT_1) ADT_TRUE ()

/* ========================================================================= */

#define ADT_EXCEPTION__NONE__NAME(CAESAR_ADT_1) CAESAR_ADT_GET_1_ADT_EXCEPTION__NONE__CONSTRUCTOR(CAESAR_ADT_1)

/* ------------------------------------------------------------------------- */

#define ADT_EXCEPTION__NONE__UNEXPECTED(CAESAR_ADT_1) ((ADT_BOOL) (ADT_CMP_STRING(CAESAR_ADT_GET_1_ADT_EXCEPTION__NONE__CONSTRUCTOR(CAESAR_ADT_1), ADT_EXCEPTION__NONE__NAME__UNEXPECTED ()) ? ADT_TRUE () : ADT_FALSE ()))

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

#include "test_77_hsa_obe.f"

#define CAESAR_ADT_INCLUDE_F

#endif /* CAESAR_ADT_INTERFACE */

/* CAUTION: there exists C functions that can not be generated automatically by CAESAR.ADT, since the corresponding LOTOS (non-constructor) operations are not defined by equations. These C functions will be considered as extern and it is assumed that their definition is contained in file "test_77_hsa_obe.f" provided by the user. The list of these functions is given below: */

/* (1) the function ADT_NOP implementing operation NOP */
/* (2) the function ADT_FBY implementing operation FBY */
/* (3) the function ADT_IF_THEN implementing operation IF_THEN */
/* (4) the function ADT_IF_THEN_ELSE implementing operation IF_THEN_ELSE */
/* (5) the function ADT_NOT implementing operation NOT */
/* (6) the function ADT_AND implementing operation AND */
/* (7) the function ADT_AND_THEN implementing operation AND_THEN */
/* (8) the function ADT_OR implementing operation OR */
/* (9) the function ADT_OR_ELSE implementing operation OR_ELSE */
/* (10) the function ADT_XOR implementing operation XOR */
/* (11) the function ADT_IMPLIES implementing operation IMPLIES */
/* (12) the function ADT_IFF implementing operation IFF */
/* (13) the function ADT_EQ_BOOL implementing operation EQ */
/* (14) the function ADT_NE_BOOL implementing operation NE */
/* (15) the function ADT_EQ_BIS_BOOL implementing operation == */
/* (16) the function ADT_NE_BIS_BOOL implementing operation <> */
/* (17) the function ADT_NE_TER_BOOL implementing operation /= */
/* (18) the function ADT_LT_BOOL implementing operation LT */
/* (19) the function ADT_LT_BIS_BOOL implementing operation < */
/* (20) the function ADT_LE_BOOL implementing operation LE */
/* (21) the function ADT_LE_BIS_BOOL implementing operation <= */
/* (22) the function ADT_GT_BOOL implementing operation GT */
/* (23) the function ADT_GT_BIS_BOOL implementing operation > */
/* (24) the function ADT_GE_BOOL implementing operation GE */
/* (25) the function ADT_GE_BIS_BOOL implementing operation >= */
/* (26) the function ADT_AND_BIS implementing operation AND */
/* (27) the function ADT_AND_THEN_BIS implementing operation AND_THEN */
/* (28) the function ADT_OR_BIS implementing operation OR */
/* (29) the function ADT_OR_ELSE_BIS implementing operation OR_ELSE */
/* (30) the function ADT_XOR_BIS implementing operation XOR */
/* (31) the function ADT_IMPLIES_BIS implementing operation IMPLIES */
/* (32) the function ADT_IFF_BIS implementing operation IFF */
/* (33) the function ADT_EQ_TER_BOOL implementing operation EQ */
/* (34) the function ADT_EQ_QUA_BOOL implementing operation == */
/* (35) the function ADT_NE_QUA_BOOL implementing operation NE */
/* (36) the function ADT_NE_QUI_BOOL implementing operation <> */
/* (37) the function ADT_NE_SEX_BOOL implementing operation /= */
/* (38) the function ADT_LT_TER_BOOL implementing operation LT */
/* (39) the function ADT_LT_QUA_BOOL implementing operation < */
/* (40) the function ADT_LE_TER_BOOL implementing operation LE */
/* (41) the function ADT_LE_QUA_BOOL implementing operation <= */
/* (42) the function ADT_GT_TER_BOOL implementing operation GT */
/* (43) the function ADT_GT_QUA_BOOL implementing operation > */
/* (44) the function ADT_GE_TER_BOOL implementing operation GE */
/* (45) the function ADT_GE_QUA_BOOL implementing operation >= */
/* (46) the function ADT_PLUS_NAT implementing operation + */
/* (47) the function ADT_MULT_NAT implementing operation * */
/* (48) the function ADT_POWER_NAT implementing operation ** */
/* (49) the function ADT_EQ_NAT implementing operation EQ */
/* (50) the function ADT_NE_NAT implementing operation NE */
/* (51) the function ADT_LT_NAT implementing operation LT */
/* (52) the function ADT_LE_NAT implementing operation LE */
/* (53) the function ADT_GT_NAT implementing operation GT */
/* (54) the function ADT_GE_NAT implementing operation GE */
/* (55) the function ADT_N1 implementing operation 1 */
/* (56) the function ADT_N2 implementing operation 2 */
/* (57) the function ADT_N3 implementing operation 3 */
/* (58) the function ADT_N4 implementing operation 4 */
/* (59) the function ADT_N5 implementing operation 5 */
/* (60) the function ADT_N6 implementing operation 6 */
/* (61) the function ADT_N7 implementing operation 7 */
/* (62) the function ADT_N8 implementing operation 8 */
/* (63) the function ADT_N9 implementing operation 9 */
/* (64) the function ADT_MINUS_NAT implementing operation - */
/* (65) the function ADT_DIV_NAT implementing operation DIV */
/* (66) the function ADT_MOD_NAT implementing operation MOD */
/* (67) the function ADT_EQ_BIS_NAT implementing operation == */
/* (68) the function ADT_NE_BIS_NAT implementing operation <> */
/* (69) the function ADT_LT_BIS_NAT implementing operation < */
/* (70) the function ADT_LE_BIS_NAT implementing operation <= */
/* (71) the function ADT_GT_BIS_NAT implementing operation > */
/* (72) the function ADT_GE_BIS_NAT implementing operation >= */
/* (73) the function ADT_MIN_NAT implementing operation MIN */
/* (74) the function ADT_MAX_NAT implementing operation MAX */
/* (75) the function ADT_GCD_NAT implementing operation GCD */
/* (76) the function ADT_SCM_NAT implementing operation SCM */
/* (77) the function ADT_NE_TER_NAT implementing operation /= */
/* (78) the function ADT_PRED_NAT implementing operation GET__1 */
/* (79) the function ADT_NA implementing operation HEX__A */
/* (80) the function ADT_NB implementing operation HEX__B */
/* (81) the function ADT_NC implementing operation HEX__C */
/* (82) the function ADT_ND implementing operation HEX__D */
/* (83) the function ADT_NE implementing operation HEX__E */
/* (84) the function ADT_NF implementing operation HEX__F */
/* (85) the function ADT_BINNUM_NAT implementing operation BINNUM */
/* (86) the function ADT_OCTNUM_NAT implementing operation OCTNUM */
/* (87) the function ADT_DECNUM_NAT implementing operation DECNUM */
/* (88) the function ADT_HEXNUM_NAT implementing operation HEXNUM */
/* (89) the function ADT_PLUS_BIS_NAT implementing operation + */
/* (90) the function ADT_MINUS_BIS_NAT implementing operation - */
/* (91) the function ADT_MULT_BIS_NAT implementing operation * */
/* (92) the function ADT_DIV_BIS_NAT implementing operation DIV */
/* (93) the function ADT_MOD_BIS_NAT implementing operation MOD */
/* (94) the function ADT_POWER_BIS_NAT implementing operation ** */
/* (95) the function ADT_BINNUM_BIS_NAT implementing operation BINNUM */
/* (96) the function ADT_OCTNUM_BIS_NAT implementing operation OCTNUM */
/* (97) the function ADT_DECNUM_BIS_NAT implementing operation DECNUM */
/* (98) the function ADT_HEXNUM_BIS_NAT implementing operation HEXNUM */
/* (99) the function ADT_EQ_TER_NAT implementing operation EQ */
/* (100) the function ADT_EQ_QUA_NAT implementing operation == */
/* (101) the function ADT_NE_QUA_NAT implementing operation NE */
/* (102) the function ADT_NE_QUI_NAT implementing operation <> */
/* (103) the function ADT_NE_SEX_NAT implementing operation /= */
/* (104) the function ADT_LT_TER_NAT implementing operation LT */
/* (105) the function ADT_LT_QUA_NAT implementing operation < */
/* (106) the function ADT_LE_TER_NAT implementing operation LE */
/* (107) the function ADT_LE_QUA_NAT implementing operation <= */
/* (108) the function ADT_GT_TER_NAT implementing operation GT */
/* (109) the function ADT_GT_QUA_NAT implementing operation > */
/* (110) the function ADT_GE_TER_NAT implementing operation GE */
/* (111) the function ADT_GE_QUA_NAT implementing operation >= */
/* (112) the function ADT_MIN_BIS_NAT implementing operation MIN */
/* (113) the function ADT_MAX_BIS_NAT implementing operation MAX */
/* (114) the function ADT_GCD_BIS_NAT implementing operation GCD */
/* (115) the function ADT_SCM_BIS_NAT implementing operation SCM */
/* (116) the function ADT_SUCC_INT implementing operation SUCC */
/* (117) the function ADT_PRED_INT implementing operation PRED */
/* (118) the function ADT_I0 implementing operation 0 */
/* (119) the function ADT_I1 implementing operation 1 */
/* (120) the function ADT_I2 implementing operation 2 */
/* (121) the function ADT_I3 implementing operation 3 */
/* (122) the function ADT_I4 implementing operation 4 */
/* (123) the function ADT_I5 implementing operation 5 */
/* (124) the function ADT_I6 implementing operation 6 */
/* (125) the function ADT_I7 implementing operation 7 */
/* (126) the function ADT_I8 implementing operation 8 */
/* (127) the function ADT_I9 implementing operation 9 */
/* (128) the function ADT_IM1 implementing operation MINUS_1 */
/* (129) the function ADT_IM2 implementing operation MINUS_2 */
/* (130) the function ADT_IM3 implementing operation MINUS_3 */
/* (131) the function ADT_IM4 implementing operation MINUS_4 */
/* (132) the function ADT_IM5 implementing operation MINUS_5 */
/* (133) the function ADT_IM6 implementing operation MINUS_6 */
/* (134) the function ADT_IM7 implementing operation MINUS_7 */
/* (135) the function ADT_IM8 implementing operation MINUS_8 */
/* (136) the function ADT_IM9 implementing operation MINUS_9 */
/* (137) the function ADT_SIGN_INT implementing operation SIGN */
/* (138) the function ADT_ABS_INT implementing operation ABS */
/* (139) the function ADT_POSNUM_INT implementing operation + */
/* (140) the function ADT_OPP_INT implementing operation - */
/* (141) the function ADT_PLUS_INT implementing operation + */
/* (142) the function ADT_MINUS_INT implementing operation - */
/* (143) the function ADT_MULT_INT implementing operation * */
/* (144) the function ADT_POWER_INT implementing operation ** */
/* (145) the function ADT_EQ_INT implementing operation EQ */
/* (146) the function ADT_NE_INT implementing operation NE */
/* (147) the function ADT_LT_INT implementing operation LT */
/* (148) the function ADT_LE_INT implementing operation LE */
/* (149) the function ADT_GT_INT implementing operation GT */
/* (150) the function ADT_GE_INT implementing operation GE */
/* (151) the function ADT_EQ_BIS_INT implementing operation == */
/* (152) the function ADT_NE_BIS_INT implementing operation <> */
/* (153) the function ADT_LT_BIS_INT implementing operation < */
/* (154) the function ADT_LE_BIS_INT implementing operation <= */
/* (155) the function ADT_GT_BIS_INT implementing operation > */
/* (156) the function ADT_GE_BIS_INT implementing operation >= */
/* (157) the function ADT_MIN_INT implementing operation MIN */
/* (158) the function ADT_MAX_INT implementing operation MAX */
/* (159) the function ADT_NATTOINT implementing operation NATTOINT */
/* (160) the function ADT_INTTONAT implementing operation INTTONAT */
/* (161) the function ADT_DIV_INT implementing operation DIV */
/* (162) the function ADT_REM_INT implementing operation REM */
/* (163) the function ADT_MOD_INT implementing operation MOD */
/* (164) the function ADT_NE_TER_INT implementing operation /= */
/* (165) the function ADT_IA implementing operation HEX__A */
/* (166) the function ADT_IB implementing operation HEX__B */
/* (167) the function ADT_IC implementing operation HEX__C */
/* (168) the function ADT_ID implementing operation HEX__D */
/* (169) the function ADT_IE implementing operation HEX__E */
/* (170) the function ADT_IF implementing operation HEX__F */
/* (171) the function ADT_NEGNUM_INT implementing operation NEGNUM */
/* (172) the function ADT_BINNUM_INT implementing operation BINNUM */
/* (173) the function ADT_OCTNUM_INT implementing operation OCTNUM */
/* (174) the function ADT_DECNUM_INT implementing operation DECNUM */
/* (175) the function ADT_HEXNUM_INT implementing operation HEXNUM */
/* (176) the function ADT_PLUS_BIS_INT implementing operation + */
/* (177) the function ADT_MINUS_BIS_INT implementing operation - */
/* (178) the function ADT_MULT_BIS_INT implementing operation * */
/* (179) the function ADT_DIV_BIS_INT implementing operation DIV */
/* (180) the function ADT_REM_BIS_INT implementing operation REM */
/* (181) the function ADT_MOD_BIS_INT implementing operation MOD */
/* (182) the function ADT_BINNUM_BIS_INT implementing operation BINNUM */
/* (183) the function ADT_OCTNUM_BIS_INT implementing operation OCTNUM */
/* (184) the function ADT_DECNUM_BIS_INT implementing operation DECNUM */
/* (185) the function ADT_HEXNUM_BIS_INT implementing operation HEXNUM */
/* (186) the function ADT_POWER_BIS_INT implementing operation ** */
/* (187) the function ADT_EQ_TER_INT implementing operation EQ */
/* (188) the function ADT_EQ_QUA_INT implementing operation == */
/* (189) the function ADT_NE_QUA_INT implementing operation NE */
/* (190) the function ADT_NE_QUI_INT implementing operation <> */
/* (191) the function ADT_NE_SEX_INT implementing operation /= */
/* (192) the function ADT_LT_TER_INT implementing operation LT */
/* (193) the function ADT_LT_QUA_INT implementing operation < */
/* (194) the function ADT_LE_TER_INT implementing operation LE */
/* (195) the function ADT_LE_QUA_INT implementing operation <= */
/* (196) the function ADT_GT_TER_INT implementing operation GT */
/* (197) the function ADT_GT_QUA_INT implementing operation > */
/* (198) the function ADT_GE_TER_INT implementing operation GE */
/* (199) the function ADT_GE_QUA_INT implementing operation >= */
/* (200) the function ADT_MIN_BIS_INT implementing operation MIN */
/* (201) the function ADT_MAX_BIS_INT implementing operation MAX */
/* (202) the function ADT_EQ_REAL implementing operation EQ */
/* (203) the function ADT_NE_REAL implementing operation NE */
/* (204) the function ADT_LT_REAL implementing operation LT */
/* (205) the function ADT_LE_REAL implementing operation LE */
/* (206) the function ADT_GT_REAL implementing operation GT */
/* (207) the function ADT_GE_REAL implementing operation GE */
/* (208) the function ADT_EQ_BIS_REAL implementing operation == */
/* (209) the function ADT_NE_BIS_REAL implementing operation <> */
/* (210) the function ADT_LT_BIS_REAL implementing operation < */
/* (211) the function ADT_LE_BIS_REAL implementing operation <= */
/* (212) the function ADT_GT_BIS_REAL implementing operation > */
/* (213) the function ADT_GE_BIS_REAL implementing operation >= */
/* (214) the function ADT_UMINUS_REAL implementing operation - */
/* (215) the function ADT_ABS_REAL implementing operation ABS */
/* (216) the function ADT_PLUS_REAL implementing operation + */
/* (217) the function ADT_MINUS_REAL implementing operation - */
/* (218) the function ADT_MULT_REAL implementing operation * */
/* (219) the function ADT_DIV_REAL implementing operation / */
/* (220) the function ADT_POWER_REAL implementing operation ** */
/* (221) the function ADT_NE_TER_REAL implementing operation /= */
/* (222) the function ADT_EQ_TER_REAL implementing operation EQ */
/* (223) the function ADT_EQ_QUA_REAL implementing operation == */
/* (224) the function ADT_NE_QUA_REAL implementing operation NE */
/* (225) the function ADT_NE_QUI_REAL implementing operation <> */
/* (226) the function ADT_NE_SEX_REAL implementing operation /= */
/* (227) the function ADT_LT_TER_REAL implementing operation LT */
/* (228) the function ADT_LT_QUA_REAL implementing operation < */
/* (229) the function ADT_LE_TER_REAL implementing operation LE */
/* (230) the function ADT_LE_QUA_REAL implementing operation <= */
/* (231) the function ADT_GT_TER_REAL implementing operation GT */
/* (232) the function ADT_GT_QUA_REAL implementing operation > */
/* (233) the function ADT_GE_TER_REAL implementing operation GE */
/* (234) the function ADT_GE_QUA_REAL implementing operation >= */
/* (235) the function ADT_PLUS_BIS_REAL implementing operation + */
/* (236) the function ADT_MINUS_BIS_REAL implementing operation - */
/* (237) the function ADT_MULT_BIS_REAL implementing operation * */
/* (238) the function ADT_DIV_BIS_REAL implementing operation / */
/* (239) the function ADT_POWER_BIS_REAL implementing operation ** */
/* (240) the function ADT_REAL_CONS implementing operation REAL */
/* (241) the function ADT_REAL_0 implementing operation REAL__0 */
/* (242) the function ADT_REAL_1 implementing operation REAL__1 */
/* (243) the function ADT_REAL_2 implementing operation REAL__2 */
/* (244) the function ADT_REAL_3 implementing operation REAL__3 */
/* (245) the function ADT_REAL_4 implementing operation REAL__4 */
/* (246) the function ADT_REAL_5 implementing operation REAL__5 */
/* (247) the function ADT_REAL_6 implementing operation REAL__6 */
/* (248) the function ADT_REAL_7 implementing operation REAL__7 */
/* (249) the function ADT_REAL_8 implementing operation REAL__8 */
/* (250) the function ADT_REAL_9 implementing operation REAL__9 */
/* (251) the function ADT_REAL_NEG implementing operation REAL__NEG */
/* (252) the function ADT_REAL_POS implementing operation REAL__POS */
/* (253) the function ADT_REAL_DOT implementing operation REAL__DOT */
/* (254) the function ADT_REAL_EXP implementing operation REAL__EXP */
/* (255) the function ADT_EQ_CHAR implementing operation EQ */
/* (256) the function ADT_NE_CHAR implementing operation NE */
/* (257) the function ADT_LT_CHAR implementing operation LT */
/* (258) the function ADT_LE_CHAR implementing operation LE */
/* (259) the function ADT_GE_CHAR implementing operation GE */
/* (260) the function ADT_GT_CHAR implementing operation GT */
/* (261) the function ADT_EQ_BIS_CHAR implementing operation == */
/* (262) the function ADT_NE_BIS_CHAR implementing operation <> */
/* (263) the function ADT_NE_TER_CHAR implementing operation /= */
/* (264) the function ADT_LT_BIS_CHAR implementing operation < */
/* (265) the function ADT_LE_BIS_CHAR implementing operation <= */
/* (266) the function ADT_GT_BIS_CHAR implementing operation > */
/* (267) the function ADT_GE_BIS_CHAR implementing operation >= */
/* (268) the function ADT_ISLOWER_CHAR implementing operation ISLOWER */
/* (269) the function ADT_ISUPPER_CHAR implementing operation ISUPPER */
/* (270) the function ADT_ISALPHA_CHAR implementing operation ISALPHA */
/* (271) the function ADT_ISALNUM_CHAR implementing operation ISALNUM */
/* (272) the function ADT_ISDIGIT_CHAR implementing operation ISDIGIT */
/* (273) the function ADT_ISXDIGIT_CHAR implementing operation ISXDIGIT */
/* (274) the function ADT_TOLOWER_CHAR implementing operation TOLOWER */
/* (275) the function ADT_TOUPPER_CHAR implementing operation TOUPPER */
/* (276) the function ADT_CHAR_000 implementing operation CHAR__000 */
/* (277) the function ADT_CHAR_001 implementing operation CHAR__001 */
/* (278) the function ADT_CHAR_002 implementing operation CHAR__002 */
/* (279) the function ADT_CHAR_003 implementing operation CHAR__003 */
/* (280) the function ADT_CHAR_004 implementing operation CHAR__004 */
/* (281) the function ADT_CHAR_005 implementing operation CHAR__005 */
/* (282) the function ADT_CHAR_006 implementing operation CHAR__006 */
/* (283) the function ADT_CHAR_007 implementing operation CHAR__007 */
/* (284) the function ADT_CHAR_008 implementing operation CHAR__008 */
/* (285) the function ADT_CHAR_009 implementing operation CHAR__009 */
/* (286) the function ADT_CHAR_010 implementing operation CHAR__010 */
/* (287) the function ADT_CHAR_011 implementing operation CHAR__011 */
/* (288) the function ADT_CHAR_012 implementing operation CHAR__012 */
/* (289) the function ADT_CHAR_013 implementing operation CHAR__013 */
/* (290) the function ADT_CHAR_014 implementing operation CHAR__014 */
/* (291) the function ADT_CHAR_015 implementing operation CHAR__015 */
/* (292) the function ADT_CHAR_016 implementing operation CHAR__016 */
/* (293) the function ADT_CHAR_017 implementing operation CHAR__017 */
/* (294) the function ADT_CHAR_018 implementing operation CHAR__018 */
/* (295) the function ADT_CHAR_019 implementing operation CHAR__019 */
/* (296) the function ADT_CHAR_020 implementing operation CHAR__020 */
/* (297) the function ADT_CHAR_021 implementing operation CHAR__021 */
/* (298) the function ADT_CHAR_022 implementing operation CHAR__022 */
/* (299) the function ADT_CHAR_023 implementing operation CHAR__023 */
/* (300) the function ADT_CHAR_024 implementing operation CHAR__024 */
/* (301) the function ADT_CHAR_025 implementing operation CHAR__025 */
/* (302) the function ADT_CHAR_026 implementing operation CHAR__026 */
/* (303) the function ADT_CHAR_027 implementing operation CHAR__027 */
/* (304) the function ADT_CHAR_028 implementing operation CHAR__028 */
/* (305) the function ADT_CHAR_029 implementing operation CHAR__029 */
/* (306) the function ADT_CHAR_030 implementing operation CHAR__030 */
/* (307) the function ADT_CHAR_031 implementing operation CHAR__031 */
/* (308) the function ADT_CHAR_032 implementing operation CHAR__032 */
/* (309) the function ADT_CHAR_033 implementing operation CHAR__033 */
/* (310) the function ADT_CHAR_034 implementing operation CHAR__034 */
/* (311) the function ADT_CHAR_035 implementing operation CHAR__035 */
/* (312) the function ADT_CHAR_036 implementing operation CHAR__036 */
/* (313) the function ADT_CHAR_037 implementing operation CHAR__037 */
/* (314) the function ADT_CHAR_038 implementing operation CHAR__038 */
/* (315) the function ADT_CHAR_039 implementing operation CHAR__039 */
/* (316) the function ADT_CHAR_040 implementing operation CHAR__040 */
/* (317) the function ADT_CHAR_041 implementing operation CHAR__041 */
/* (318) the function ADT_CHAR_042 implementing operation CHAR__042 */
/* (319) the function ADT_CHAR_043 implementing operation CHAR__043 */
/* (320) the function ADT_CHAR_044 implementing operation CHAR__044 */
/* (321) the function ADT_CHAR_045 implementing operation CHAR__045 */
/* (322) the function ADT_CHAR_046 implementing operation CHAR__046 */
/* (323) the function ADT_CHAR_047 implementing operation CHAR__047 */
/* (324) the function ADT_CHAR_048 implementing operation CHAR__048 */
/* (325) the function ADT_CHAR_049 implementing operation CHAR__049 */
/* (326) the function ADT_CHAR_050 implementing operation CHAR__050 */
/* (327) the function ADT_CHAR_051 implementing operation CHAR__051 */
/* (328) the function ADT_CHAR_052 implementing operation CHAR__052 */
/* (329) the function ADT_CHAR_053 implementing operation CHAR__053 */
/* (330) the function ADT_CHAR_054 implementing operation CHAR__054 */
/* (331) the function ADT_CHAR_055 implementing operation CHAR__055 */
/* (332) the function ADT_CHAR_056 implementing operation CHAR__056 */
/* (333) the function ADT_CHAR_057 implementing operation CHAR__057 */
/* (334) the function ADT_CHAR_058 implementing operation CHAR__058 */
/* (335) the function ADT_CHAR_059 implementing operation CHAR__059 */
/* (336) the function ADT_CHAR_060 implementing operation CHAR__060 */
/* (337) the function ADT_CHAR_061 implementing operation CHAR__061 */
/* (338) the function ADT_CHAR_062 implementing operation CHAR__062 */
/* (339) the function ADT_CHAR_063 implementing operation CHAR__063 */
/* (340) the function ADT_CHAR_064 implementing operation CHAR__064 */
/* (341) the function ADT_CHAR_065 implementing operation CHAR__065 */
/* (342) the function ADT_CHAR_066 implementing operation CHAR__066 */
/* (343) the function ADT_CHAR_067 implementing operation CHAR__067 */
/* (344) the function ADT_CHAR_068 implementing operation CHAR__068 */
/* (345) the function ADT_CHAR_069 implementing operation CHAR__069 */
/* (346) the function ADT_CHAR_070 implementing operation CHAR__070 */
/* (347) the function ADT_CHAR_071 implementing operation CHAR__071 */
/* (348) the function ADT_CHAR_072 implementing operation CHAR__072 */
/* (349) the function ADT_CHAR_073 implementing operation CHAR__073 */
/* (350) the function ADT_CHAR_074 implementing operation CHAR__074 */
/* (351) the function ADT_CHAR_075 implementing operation CHAR__075 */
/* (352) the function ADT_CHAR_076 implementing operation CHAR__076 */
/* (353) the function ADT_CHAR_077 implementing operation CHAR__077 */
/* (354) the function ADT_CHAR_078 implementing operation CHAR__078 */
/* (355) the function ADT_CHAR_079 implementing operation CHAR__079 */
/* (356) the function ADT_CHAR_080 implementing operation CHAR__080 */
/* (357) the function ADT_CHAR_081 implementing operation CHAR__081 */
/* (358) the function ADT_CHAR_082 implementing operation CHAR__082 */
/* (359) the function ADT_CHAR_083 implementing operation CHAR__083 */
/* (360) the function ADT_CHAR_084 implementing operation CHAR__084 */
/* (361) the function ADT_CHAR_085 implementing operation CHAR__085 */
/* (362) the function ADT_CHAR_086 implementing operation CHAR__086 */
/* (363) the function ADT_CHAR_087 implementing operation CHAR__087 */
/* (364) the function ADT_CHAR_088 implementing operation CHAR__088 */
/* (365) the function ADT_CHAR_089 implementing operation CHAR__089 */
/* (366) the function ADT_CHAR_090 implementing operation CHAR__090 */
/* (367) the function ADT_CHAR_091 implementing operation CHAR__091 */
/* (368) the function ADT_CHAR_092 implementing operation CHAR__092 */
/* (369) the function ADT_CHAR_093 implementing operation CHAR__093 */
/* (370) the function ADT_CHAR_094 implementing operation CHAR__094 */
/* (371) the function ADT_CHAR_095 implementing operation CHAR__095 */
/* (372) the function ADT_CHAR_096 implementing operation CHAR__096 */
/* (373) the function ADT_CHAR_097 implementing operation CHAR__097 */
/* (374) the function ADT_CHAR_098 implementing operation CHAR__098 */
/* (375) the function ADT_CHAR_099 implementing operation CHAR__099 */
/* (376) the function ADT_CHAR_100 implementing operation CHAR__100 */
/* (377) the function ADT_CHAR_101 implementing operation CHAR__101 */
/* (378) the function ADT_CHAR_102 implementing operation CHAR__102 */
/* (379) the function ADT_CHAR_103 implementing operation CHAR__103 */
/* (380) the function ADT_CHAR_104 implementing operation CHAR__104 */
/* (381) the function ADT_CHAR_105 implementing operation CHAR__105 */
/* (382) the function ADT_CHAR_106 implementing operation CHAR__106 */
/* (383) the function ADT_CHAR_107 implementing operation CHAR__107 */
/* (384) the function ADT_CHAR_108 implementing operation CHAR__108 */
/* (385) the function ADT_CHAR_109 implementing operation CHAR__109 */
/* (386) the function ADT_CHAR_110 implementing operation CHAR__110 */
/* (387) the function ADT_CHAR_111 implementing operation CHAR__111 */
/* (388) the function ADT_CHAR_112 implementing operation CHAR__112 */
/* (389) the function ADT_CHAR_113 implementing operation CHAR__113 */
/* (390) the function ADT_CHAR_114 implementing operation CHAR__114 */
/* (391) the function ADT_CHAR_115 implementing operation CHAR__115 */
/* (392) the function ADT_CHAR_116 implementing operation CHAR__116 */
/* (393) the function ADT_CHAR_117 implementing operation CHAR__117 */
/* (394) the function ADT_CHAR_118 implementing operation CHAR__118 */
/* (395) the function ADT_CHAR_119 implementing operation CHAR__119 */
/* (396) the function ADT_CHAR_120 implementing operation CHAR__120 */
/* (397) the function ADT_CHAR_121 implementing operation CHAR__121 */
/* (398) the function ADT_CHAR_122 implementing operation CHAR__122 */
/* (399) the function ADT_CHAR_123 implementing operation CHAR__123 */
/* (400) the function ADT_CHAR_124 implementing operation CHAR__124 */
/* (401) the function ADT_CHAR_125 implementing operation CHAR__125 */
/* (402) the function ADT_CHAR_126 implementing operation CHAR__126 */
/* (403) the function ADT_CHAR_127 implementing operation CHAR__127 */
/* (404) the function ADT_CHAR_128 implementing operation CHAR__128 */
/* (405) the function ADT_CHAR_129 implementing operation CHAR__129 */
/* (406) the function ADT_CHAR_130 implementing operation CHAR__130 */
/* (407) the function ADT_CHAR_131 implementing operation CHAR__131 */
/* (408) the function ADT_CHAR_132 implementing operation CHAR__132 */
/* (409) the function ADT_CHAR_133 implementing operation CHAR__133 */
/* (410) the function ADT_CHAR_134 implementing operation CHAR__134 */
/* (411) the function ADT_CHAR_135 implementing operation CHAR__135 */
/* (412) the function ADT_CHAR_136 implementing operation CHAR__136 */
/* (413) the function ADT_CHAR_137 implementing operation CHAR__137 */
/* (414) the function ADT_CHAR_138 implementing operation CHAR__138 */
/* (415) the function ADT_CHAR_139 implementing operation CHAR__139 */
/* (416) the function ADT_CHAR_140 implementing operation CHAR__140 */
/* (417) the function ADT_CHAR_141 implementing operation CHAR__141 */
/* (418) the function ADT_CHAR_142 implementing operation CHAR__142 */
/* (419) the function ADT_CHAR_143 implementing operation CHAR__143 */
/* (420) the function ADT_CHAR_144 implementing operation CHAR__144 */
/* (421) the function ADT_CHAR_145 implementing operation CHAR__145 */
/* (422) the function ADT_CHAR_146 implementing operation CHAR__146 */
/* (423) the function ADT_CHAR_147 implementing operation CHAR__147 */
/* (424) the function ADT_CHAR_148 implementing operation CHAR__148 */
/* (425) the function ADT_CHAR_149 implementing operation CHAR__149 */
/* (426) the function ADT_CHAR_150 implementing operation CHAR__150 */
/* (427) the function ADT_CHAR_151 implementing operation CHAR__151 */
/* (428) the function ADT_CHAR_152 implementing operation CHAR__152 */
/* (429) the function ADT_CHAR_153 implementing operation CHAR__153 */
/* (430) the function ADT_CHAR_154 implementing operation CHAR__154 */
/* (431) the function ADT_CHAR_155 implementing operation CHAR__155 */
/* (432) the function ADT_CHAR_156 implementing operation CHAR__156 */
/* (433) the function ADT_CHAR_157 implementing operation CHAR__157 */
/* (434) the function ADT_CHAR_158 implementing operation CHAR__158 */
/* (435) the function ADT_CHAR_159 implementing operation CHAR__159 */
/* (436) the function ADT_CHAR_160 implementing operation CHAR__160 */
/* (437) the function ADT_CHAR_161 implementing operation CHAR__161 */
/* (438) the function ADT_CHAR_162 implementing operation CHAR__162 */
/* (439) the function ADT_CHAR_163 implementing operation CHAR__163 */
/* (440) the function ADT_CHAR_164 implementing operation CHAR__164 */
/* (441) the function ADT_CHAR_165 implementing operation CHAR__165 */
/* (442) the function ADT_CHAR_166 implementing operation CHAR__166 */
/* (443) the function ADT_CHAR_167 implementing operation CHAR__167 */
/* (444) the function ADT_CHAR_168 implementing operation CHAR__168 */
/* (445) the function ADT_CHAR_169 implementing operation CHAR__169 */
/* (446) the function ADT_CHAR_170 implementing operation CHAR__170 */
/* (447) the function ADT_CHAR_171 implementing operation CHAR__171 */
/* (448) the function ADT_CHAR_172 implementing operation CHAR__172 */
/* (449) the function ADT_CHAR_173 implementing operation CHAR__173 */
/* (450) the function ADT_CHAR_174 implementing operation CHAR__174 */
/* (451) the function ADT_CHAR_175 implementing operation CHAR__175 */
/* (452) the function ADT_CHAR_176 implementing operation CHAR__176 */
/* (453) the function ADT_CHAR_177 implementing operation CHAR__177 */
/* (454) the function ADT_CHAR_178 implementing operation CHAR__178 */
/* (455) the function ADT_CHAR_179 implementing operation CHAR__179 */
/* (456) the function ADT_CHAR_180 implementing operation CHAR__180 */
/* (457) the function ADT_CHAR_181 implementing operation CHAR__181 */
/* (458) the function ADT_CHAR_182 implementing operation CHAR__182 */
/* (459) the function ADT_CHAR_183 implementing operation CHAR__183 */
/* (460) the function ADT_CHAR_184 implementing operation CHAR__184 */
/* (461) the function ADT_CHAR_185 implementing operation CHAR__185 */
/* (462) the function ADT_CHAR_186 implementing operation CHAR__186 */
/* (463) the function ADT_CHAR_187 implementing operation CHAR__187 */
/* (464) the function ADT_CHAR_188 implementing operation CHAR__188 */
/* (465) the function ADT_CHAR_189 implementing operation CHAR__189 */
/* (466) the function ADT_CHAR_190 implementing operation CHAR__190 */
/* (467) the function ADT_CHAR_191 implementing operation CHAR__191 */
/* (468) the function ADT_CHAR_192 implementing operation CHAR__192 */
/* (469) the function ADT_CHAR_193 implementing operation CHAR__193 */
/* (470) the function ADT_CHAR_194 implementing operation CHAR__194 */
/* (471) the function ADT_CHAR_195 implementing operation CHAR__195 */
/* (472) the function ADT_CHAR_196 implementing operation CHAR__196 */
/* (473) the function ADT_CHAR_197 implementing operation CHAR__197 */
/* (474) the function ADT_CHAR_198 implementing operation CHAR__198 */
/* (475) the function ADT_CHAR_199 implementing operation CHAR__199 */
/* (476) the function ADT_CHAR_200 implementing operation CHAR__200 */
/* (477) the function ADT_CHAR_201 implementing operation CHAR__201 */
/* (478) the function ADT_CHAR_202 implementing operation CHAR__202 */
/* (479) the function ADT_CHAR_203 implementing operation CHAR__203 */
/* (480) the function ADT_CHAR_204 implementing operation CHAR__204 */
/* (481) the function ADT_CHAR_205 implementing operation CHAR__205 */
/* (482) the function ADT_CHAR_206 implementing operation CHAR__206 */
/* (483) the function ADT_CHAR_207 implementing operation CHAR__207 */
/* (484) the function ADT_CHAR_208 implementing operation CHAR__208 */
/* (485) the function ADT_CHAR_209 implementing operation CHAR__209 */
/* (486) the function ADT_CHAR_210 implementing operation CHAR__210 */
/* (487) the function ADT_CHAR_211 implementing operation CHAR__211 */
/* (488) the function ADT_CHAR_212 implementing operation CHAR__212 */
/* (489) the function ADT_CHAR_213 implementing operation CHAR__213 */
/* (490) the function ADT_CHAR_214 implementing operation CHAR__214 */
/* (491) the function ADT_CHAR_215 implementing operation CHAR__215 */
/* (492) the function ADT_CHAR_216 implementing operation CHAR__216 */
/* (493) the function ADT_CHAR_217 implementing operation CHAR__217 */
/* (494) the function ADT_CHAR_218 implementing operation CHAR__218 */
/* (495) the function ADT_CHAR_219 implementing operation CHAR__219 */
/* (496) the function ADT_CHAR_220 implementing operation CHAR__220 */
/* (497) the function ADT_CHAR_221 implementing operation CHAR__221 */
/* (498) the function ADT_CHAR_222 implementing operation CHAR__222 */
/* (499) the function ADT_CHAR_223 implementing operation CHAR__223 */
/* (500) the function ADT_CHAR_224 implementing operation CHAR__224 */
/* (501) the function ADT_CHAR_225 implementing operation CHAR__225 */
/* (502) the function ADT_CHAR_226 implementing operation CHAR__226 */
/* (503) the function ADT_CHAR_227 implementing operation CHAR__227 */
/* (504) the function ADT_CHAR_228 implementing operation CHAR__228 */
/* (505) the function ADT_CHAR_229 implementing operation CHAR__229 */
/* (506) the function ADT_CHAR_230 implementing operation CHAR__230 */
/* (507) the function ADT_CHAR_231 implementing operation CHAR__231 */
/* (508) the function ADT_CHAR_232 implementing operation CHAR__232 */
/* (509) the function ADT_CHAR_233 implementing operation CHAR__233 */
/* (510) the function ADT_CHAR_234 implementing operation CHAR__234 */
/* (511) the function ADT_CHAR_235 implementing operation CHAR__235 */
/* (512) the function ADT_CHAR_236 implementing operation CHAR__236 */
/* (513) the function ADT_CHAR_237 implementing operation CHAR__237 */
/* (514) the function ADT_CHAR_238 implementing operation CHAR__238 */
/* (515) the function ADT_CHAR_239 implementing operation CHAR__239 */
/* (516) the function ADT_CHAR_240 implementing operation CHAR__240 */
/* (517) the function ADT_CHAR_241 implementing operation CHAR__241 */
/* (518) the function ADT_CHAR_242 implementing operation CHAR__242 */
/* (519) the function ADT_CHAR_243 implementing operation CHAR__243 */
/* (520) the function ADT_CHAR_244 implementing operation CHAR__244 */
/* (521) the function ADT_CHAR_245 implementing operation CHAR__245 */
/* (522) the function ADT_CHAR_246 implementing operation CHAR__246 */
/* (523) the function ADT_CHAR_247 implementing operation CHAR__247 */
/* (524) the function ADT_CHAR_248 implementing operation CHAR__248 */
/* (525) the function ADT_CHAR_249 implementing operation CHAR__249 */
/* (526) the function ADT_CHAR_250 implementing operation CHAR__250 */
/* (527) the function ADT_CHAR_251 implementing operation CHAR__251 */
/* (528) the function ADT_CHAR_252 implementing operation CHAR__252 */
/* (529) the function ADT_CHAR_253 implementing operation CHAR__253 */
/* (530) the function ADT_CHAR_254 implementing operation CHAR__254 */
/* (531) the function ADT_CHAR_255 implementing operation CHAR__255 */
/* (532) the function ADT_EQ_TER_CHAR implementing operation EQ */
/* (533) the function ADT_EQ_QUA_CHAR implementing operation == */
/* (534) the function ADT_NE_QUA_CHAR implementing operation NE */
/* (535) the function ADT_NE_QUI_CHAR implementing operation <> */
/* (536) the function ADT_NE_SEX_CHAR implementing operation /= */
/* (537) the function ADT_LT_TER_CHAR implementing operation LT */
/* (538) the function ADT_LT_QUA_CHAR implementing operation < */
/* (539) the function ADT_LE_TER_CHAR implementing operation LE */
/* (540) the function ADT_LE_QUA_CHAR implementing operation <= */
/* (541) the function ADT_GT_TER_CHAR implementing operation GT */
/* (542) the function ADT_GT_QUA_CHAR implementing operation > */
/* (543) the function ADT_GE_TER_CHAR implementing operation GE */
/* (544) the function ADT_GE_QUA_CHAR implementing operation >= */
/* (545) the function ADT_EQ_STRING implementing operation EQ */
/* (546) the function ADT_NE_STRING implementing operation NE */
/* (547) the function ADT_LT_STRING implementing operation LT */
/* (548) the function ADT_LE_STRING implementing operation LE */
/* (549) the function ADT_GE_STRING implementing operation GE */
/* (550) the function ADT_GT_STRING implementing operation GT */
/* (551) the function ADT_CONCAT_STRING implementing operation + */
/* (552) the function ADT_CONCAT_CONST_STRING implementing operation ~ */
/* (553) the function ADT_LENGTH_STRING implementing operation LENGTH */
/* (554) the function ADT_ISEMPTY_STRING implementing operation IS_EMPTY */
/* (555) the function ADT_PREFIX_STRING implementing operation PREFIX */
/* (556) the function ADT_SUFFIX_STRING implementing operation SUFFIX */
/* (557) the function ADT_SUBSTR_STRING implementing operation SUBSTR */
/* (558) the function ADT_NTH_STRING implementing operation NTH */
/* (559) the function ADT_INDEX_STRING implementing operation INDEX */
/* (560) the function ADT_RINDEX_STRING implementing operation RINDEX */
/* (561) the function ADT_TO_STRING_NAT implementing operation STRING */
/* (562) the function ADT_TO_STRING_INT implementing operation STRING */
/* (563) the function ADT_TO_STRING_CHAR implementing operation STRING */
/* (564) the function ADT_TO_STRING_REAL implementing operation STRING */
/* (565) the function ADT_EQ_BIS_STRING implementing operation == */
/* (566) the function ADT_NE_BIS_STRING implementing operation <> */
/* (567) the function ADT_NE_TER_STRING implementing operation /= */
/* (568) the function ADT_LT_BIS_STRING implementing operation < */
/* (569) the function ADT_LE_BIS_STRING implementing operation <= */
/* (570) the function ADT_GT_BIS_STRING implementing operation > */
/* (571) the function ADT_GE_BIS_STRING implementing operation >= */
/* (572) the function ADT_STRING_000 implementing operation STRING__000 */
/* (573) the function ADT_STRING_001 implementing operation STRING__001 */
/* (574) the function ADT_STRING_002 implementing operation STRING__002 */
/* (575) the function ADT_STRING_003 implementing operation STRING__003 */
/* (576) the function ADT_STRING_004 implementing operation STRING__004 */
/* (577) the function ADT_STRING_005 implementing operation STRING__005 */
/* (578) the function ADT_STRING_006 implementing operation STRING__006 */
/* (579) the function ADT_STRING_007 implementing operation STRING__007 */
/* (580) the function ADT_STRING_008 implementing operation STRING__008 */
/* (581) the function ADT_STRING_009 implementing operation STRING__009 */
/* (582) the function ADT_STRING_010 implementing operation STRING__010 */
/* (583) the function ADT_STRING_011 implementing operation STRING__011 */
/* (584) the function ADT_STRING_012 implementing operation STRING__012 */
/* (585) the function ADT_STRING_013 implementing operation STRING__013 */
/* (586) the function ADT_STRING_014 implementing operation STRING__014 */
/* (587) the function ADT_STRING_015 implementing operation STRING__015 */
/* (588) the function ADT_STRING_016 implementing operation STRING__016 */
/* (589) the function ADT_STRING_017 implementing operation STRING__017 */
/* (590) the function ADT_STRING_018 implementing operation STRING__018 */
/* (591) the function ADT_STRING_019 implementing operation STRING__019 */
/* (592) the function ADT_STRING_020 implementing operation STRING__020 */
/* (593) the function ADT_STRING_021 implementing operation STRING__021 */
/* (594) the function ADT_STRING_022 implementing operation STRING__022 */
/* (595) the function ADT_STRING_023 implementing operation STRING__023 */
/* (596) the function ADT_STRING_024 implementing operation STRING__024 */
/* (597) the function ADT_STRING_025 implementing operation STRING__025 */
/* (598) the function ADT_STRING_026 implementing operation STRING__026 */
/* (599) the function ADT_STRING_027 implementing operation STRING__027 */
/* (600) the function ADT_STRING_028 implementing operation STRING__028 */
/* (601) the function ADT_STRING_029 implementing operation STRING__029 */
/* (602) the function ADT_STRING_030 implementing operation STRING__030 */
/* (603) the function ADT_STRING_031 implementing operation STRING__031 */
/* (604) the function ADT_STRING_032 implementing operation STRING__032 */
/* (605) the function ADT_STRING_033 implementing operation STRING__033 */
/* (606) the function ADT_STRING_034 implementing operation STRING__034 */
/* (607) the function ADT_STRING_035 implementing operation STRING__035 */
/* (608) the function ADT_STRING_036 implementing operation STRING__036 */
/* (609) the function ADT_STRING_037 implementing operation STRING__037 */
/* (610) the function ADT_STRING_038 implementing operation STRING__038 */
/* (611) the function ADT_STRING_039 implementing operation STRING__039 */
/* (612) the function ADT_STRING_040 implementing operation STRING__040 */
/* (613) the function ADT_STRING_041 implementing operation STRING__041 */
/* (614) the function ADT_STRING_042 implementing operation STRING__042 */
/* (615) the function ADT_STRING_043 implementing operation STRING__043 */
/* (616) the function ADT_STRING_044 implementing operation STRING__044 */
/* (617) the function ADT_STRING_045 implementing operation STRING__045 */
/* (618) the function ADT_STRING_046 implementing operation STRING__046 */
/* (619) the function ADT_STRING_047 implementing operation STRING__047 */
/* (620) the function ADT_STRING_048 implementing operation STRING__048 */
/* (621) the function ADT_STRING_049 implementing operation STRING__049 */
/* (622) the function ADT_STRING_050 implementing operation STRING__050 */
/* (623) the function ADT_STRING_051 implementing operation STRING__051 */
/* (624) the function ADT_STRING_052 implementing operation STRING__052 */
/* (625) the function ADT_STRING_053 implementing operation STRING__053 */
/* (626) the function ADT_STRING_054 implementing operation STRING__054 */
/* (627) the function ADT_STRING_055 implementing operation STRING__055 */
/* (628) the function ADT_STRING_056 implementing operation STRING__056 */
/* (629) the function ADT_STRING_057 implementing operation STRING__057 */
/* (630) the function ADT_STRING_058 implementing operation STRING__058 */
/* (631) the function ADT_STRING_059 implementing operation STRING__059 */
/* (632) the function ADT_STRING_060 implementing operation STRING__060 */
/* (633) the function ADT_STRING_061 implementing operation STRING__061 */
/* (634) the function ADT_STRING_062 implementing operation STRING__062 */
/* (635) the function ADT_STRING_063 implementing operation STRING__063 */
/* (636) the function ADT_STRING_064 implementing operation STRING__064 */
/* (637) the function ADT_STRING_065 implementing operation STRING__065 */
/* (638) the function ADT_STRING_066 implementing operation STRING__066 */
/* (639) the function ADT_STRING_067 implementing operation STRING__067 */
/* (640) the function ADT_STRING_068 implementing operation STRING__068 */
/* (641) the function ADT_STRING_069 implementing operation STRING__069 */
/* (642) the function ADT_STRING_070 implementing operation STRING__070 */
/* (643) the function ADT_STRING_071 implementing operation STRING__071 */
/* (644) the function ADT_STRING_072 implementing operation STRING__072 */
/* (645) the function ADT_STRING_073 implementing operation STRING__073 */
/* (646) the function ADT_STRING_074 implementing operation STRING__074 */
/* (647) the function ADT_STRING_075 implementing operation STRING__075 */
/* (648) the function ADT_STRING_076 implementing operation STRING__076 */
/* (649) the function ADT_STRING_077 implementing operation STRING__077 */
/* (650) the function ADT_STRING_078 implementing operation STRING__078 */
/* (651) the function ADT_STRING_079 implementing operation STRING__079 */
/* (652) the function ADT_STRING_080 implementing operation STRING__080 */
/* (653) the function ADT_STRING_081 implementing operation STRING__081 */
/* (654) the function ADT_STRING_082 implementing operation STRING__082 */
/* (655) the function ADT_STRING_083 implementing operation STRING__083 */
/* (656) the function ADT_STRING_084 implementing operation STRING__084 */
/* (657) the function ADT_STRING_085 implementing operation STRING__085 */
/* (658) the function ADT_STRING_086 implementing operation STRING__086 */
/* (659) the function ADT_STRING_087 implementing operation STRING__087 */
/* (660) the function ADT_STRING_088 implementing operation STRING__088 */
/* (661) the function ADT_STRING_089 implementing operation STRING__089 */
/* (662) the function ADT_STRING_090 implementing operation STRING__090 */
/* (663) the function ADT_STRING_091 implementing operation STRING__091 */
/* (664) the function ADT_STRING_092 implementing operation STRING__092 */
/* (665) the function ADT_STRING_093 implementing operation STRING__093 */
/* (666) the function ADT_STRING_094 implementing operation STRING__094 */
/* (667) the function ADT_STRING_095 implementing operation STRING__095 */
/* (668) the function ADT_STRING_096 implementing operation STRING__096 */
/* (669) the function ADT_STRING_097 implementing operation STRING__097 */
/* (670) the function ADT_STRING_098 implementing operation STRING__098 */
/* (671) the function ADT_STRING_099 implementing operation STRING__099 */
/* (672) the function ADT_STRING_100 implementing operation STRING__100 */
/* (673) the function ADT_STRING_101 implementing operation STRING__101 */
/* (674) the function ADT_STRING_102 implementing operation STRING__102 */
/* (675) the function ADT_STRING_103 implementing operation STRING__103 */
/* (676) the function ADT_STRING_104 implementing operation STRING__104 */
/* (677) the function ADT_STRING_105 implementing operation STRING__105 */
/* (678) the function ADT_STRING_106 implementing operation STRING__106 */
/* (679) the function ADT_STRING_107 implementing operation STRING__107 */
/* (680) the function ADT_STRING_108 implementing operation STRING__108 */
/* (681) the function ADT_STRING_109 implementing operation STRING__109 */
/* (682) the function ADT_STRING_110 implementing operation STRING__110 */
/* (683) the function ADT_STRING_111 implementing operation STRING__111 */
/* (684) the function ADT_STRING_112 implementing operation STRING__112 */
/* (685) the function ADT_STRING_113 implementing operation STRING__113 */
/* (686) the function ADT_STRING_114 implementing operation STRING__114 */
/* (687) the function ADT_STRING_115 implementing operation STRING__115 */
/* (688) the function ADT_STRING_116 implementing operation STRING__116 */
/* (689) the function ADT_STRING_117 implementing operation STRING__117 */
/* (690) the function ADT_STRING_118 implementing operation STRING__118 */
/* (691) the function ADT_STRING_119 implementing operation STRING__119 */
/* (692) the function ADT_STRING_120 implementing operation STRING__120 */
/* (693) the function ADT_STRING_121 implementing operation STRING__121 */
/* (694) the function ADT_STRING_122 implementing operation STRING__122 */
/* (695) the function ADT_STRING_123 implementing operation STRING__123 */
/* (696) the function ADT_STRING_124 implementing operation STRING__124 */
/* (697) the function ADT_STRING_125 implementing operation STRING__125 */
/* (698) the function ADT_STRING_126 implementing operation STRING__126 */
/* (699) the function ADT_STRING_127 implementing operation STRING__127 */
/* (700) the function ADT_STRING_128 implementing operation STRING__128 */
/* (701) the function ADT_STRING_129 implementing operation STRING__129 */
/* (702) the function ADT_STRING_130 implementing operation STRING__130 */
/* (703) the function ADT_STRING_131 implementing operation STRING__131 */
/* (704) the function ADT_STRING_132 implementing operation STRING__132 */
/* (705) the function ADT_STRING_133 implementing operation STRING__133 */
/* (706) the function ADT_STRING_134 implementing operation STRING__134 */
/* (707) the function ADT_STRING_135 implementing operation STRING__135 */
/* (708) the function ADT_STRING_136 implementing operation STRING__136 */
/* (709) the function ADT_STRING_137 implementing operation STRING__137 */
/* (710) the function ADT_STRING_138 implementing operation STRING__138 */
/* (711) the function ADT_STRING_139 implementing operation STRING__139 */
/* (712) the function ADT_STRING_140 implementing operation STRING__140 */
/* (713) the function ADT_STRING_141 implementing operation STRING__141 */
/* (714) the function ADT_STRING_142 implementing operation STRING__142 */
/* (715) the function ADT_STRING_143 implementing operation STRING__143 */
/* (716) the function ADT_STRING_144 implementing operation STRING__144 */
/* (717) the function ADT_STRING_145 implementing operation STRING__145 */
/* (718) the function ADT_STRING_146 implementing operation STRING__146 */
/* (719) the function ADT_STRING_147 implementing operation STRING__147 */
/* (720) the function ADT_STRING_148 implementing operation STRING__148 */
/* (721) the function ADT_STRING_149 implementing operation STRING__149 */
/* (722) the function ADT_STRING_150 implementing operation STRING__150 */
/* (723) the function ADT_STRING_151 implementing operation STRING__151 */
/* (724) the function ADT_STRING_152 implementing operation STRING__152 */
/* (725) the function ADT_STRING_153 implementing operation STRING__153 */
/* (726) the function ADT_STRING_154 implementing operation STRING__154 */
/* (727) the function ADT_STRING_155 implementing operation STRING__155 */
/* (728) the function ADT_STRING_156 implementing operation STRING__156 */
/* (729) the function ADT_STRING_157 implementing operation STRING__157 */
/* (730) the function ADT_STRING_158 implementing operation STRING__158 */
/* (731) the function ADT_STRING_159 implementing operation STRING__159 */
/* (732) the function ADT_STRING_160 implementing operation STRING__160 */
/* (733) the function ADT_STRING_161 implementing operation STRING__161 */
/* (734) the function ADT_STRING_162 implementing operation STRING__162 */
/* (735) the function ADT_STRING_163 implementing operation STRING__163 */
/* (736) the function ADT_STRING_164 implementing operation STRING__164 */
/* (737) the function ADT_STRING_165 implementing operation STRING__165 */
/* (738) the function ADT_STRING_166 implementing operation STRING__166 */
/* (739) the function ADT_STRING_167 implementing operation STRING__167 */
/* (740) the function ADT_STRING_168 implementing operation STRING__168 */
/* (741) the function ADT_STRING_169 implementing operation STRING__169 */
/* (742) the function ADT_STRING_170 implementing operation STRING__170 */
/* (743) the function ADT_STRING_171 implementing operation STRING__171 */
/* (744) the function ADT_STRING_172 implementing operation STRING__172 */
/* (745) the function ADT_STRING_173 implementing operation STRING__173 */
/* (746) the function ADT_STRING_174 implementing operation STRING__174 */
/* (747) the function ADT_STRING_175 implementing operation STRING__175 */
/* (748) the function ADT_STRING_176 implementing operation STRING__176 */
/* (749) the function ADT_STRING_177 implementing operation STRING__177 */
/* (750) the function ADT_STRING_178 implementing operation STRING__178 */
/* (751) the function ADT_STRING_179 implementing operation STRING__179 */
/* (752) the function ADT_STRING_180 implementing operation STRING__180 */
/* (753) the function ADT_STRING_181 implementing operation STRING__181 */
/* (754) the function ADT_STRING_182 implementing operation STRING__182 */
/* (755) the function ADT_STRING_183 implementing operation STRING__183 */
/* (756) the function ADT_STRING_184 implementing operation STRING__184 */
/* (757) the function ADT_STRING_185 implementing operation STRING__185 */
/* (758) the function ADT_STRING_186 implementing operation STRING__186 */
/* (759) the function ADT_STRING_187 implementing operation STRING__187 */
/* (760) the function ADT_STRING_188 implementing operation STRING__188 */
/* (761) the function ADT_STRING_189 implementing operation STRING__189 */
/* (762) the function ADT_STRING_190 implementing operation STRING__190 */
/* (763) the function ADT_STRING_191 implementing operation STRING__191 */
/* (764) the function ADT_STRING_192 implementing operation STRING__192 */
/* (765) the function ADT_STRING_193 implementing operation STRING__193 */
/* (766) the function ADT_STRING_194 implementing operation STRING__194 */
/* (767) the function ADT_STRING_195 implementing operation STRING__195 */
/* (768) the function ADT_STRING_196 implementing operation STRING__196 */
/* (769) the function ADT_STRING_197 implementing operation STRING__197 */
/* (770) the function ADT_STRING_198 implementing operation STRING__198 */
/* (771) the function ADT_STRING_199 implementing operation STRING__199 */
/* (772) the function ADT_STRING_200 implementing operation STRING__200 */
/* (773) the function ADT_STRING_201 implementing operation STRING__201 */
/* (774) the function ADT_STRING_202 implementing operation STRING__202 */
/* (775) the function ADT_STRING_203 implementing operation STRING__203 */
/* (776) the function ADT_STRING_204 implementing operation STRING__204 */
/* (777) the function ADT_STRING_205 implementing operation STRING__205 */
/* (778) the function ADT_STRING_206 implementing operation STRING__206 */
/* (779) the function ADT_STRING_207 implementing operation STRING__207 */
/* (780) the function ADT_STRING_208 implementing operation STRING__208 */
/* (781) the function ADT_STRING_209 implementing operation STRING__209 */
/* (782) the function ADT_STRING_210 implementing operation STRING__210 */
/* (783) the function ADT_STRING_211 implementing operation STRING__211 */
/* (784) the function ADT_STRING_212 implementing operation STRING__212 */
/* (785) the function ADT_STRING_213 implementing operation STRING__213 */
/* (786) the function ADT_STRING_214 implementing operation STRING__214 */
/* (787) the function ADT_STRING_215 implementing operation STRING__215 */
/* (788) the function ADT_STRING_216 implementing operation STRING__216 */
/* (789) the function ADT_STRING_217 implementing operation STRING__217 */
/* (790) the function ADT_STRING_218 implementing operation STRING__218 */
/* (791) the function ADT_STRING_219 implementing operation STRING__219 */
/* (792) the function ADT_STRING_220 implementing operation STRING__220 */
/* (793) the function ADT_STRING_221 implementing operation STRING__221 */
/* (794) the function ADT_STRING_222 implementing operation STRING__222 */
/* (795) the function ADT_STRING_223 implementing operation STRING__223 */
/* (796) the function ADT_STRING_224 implementing operation STRING__224 */
/* (797) the function ADT_STRING_225 implementing operation STRING__225 */
/* (798) the function ADT_STRING_226 implementing operation STRING__226 */
/* (799) the function ADT_STRING_227 implementing operation STRING__227 */
/* (800) the function ADT_STRING_228 implementing operation STRING__228 */
/* (801) the function ADT_STRING_229 implementing operation STRING__229 */
/* (802) the function ADT_STRING_230 implementing operation STRING__230 */
/* (803) the function ADT_STRING_231 implementing operation STRING__231 */
/* (804) the function ADT_STRING_232 implementing operation STRING__232 */
/* (805) the function ADT_STRING_233 implementing operation STRING__233 */
/* (806) the function ADT_STRING_234 implementing operation STRING__234 */
/* (807) the function ADT_STRING_235 implementing operation STRING__235 */
/* (808) the function ADT_STRING_236 implementing operation STRING__236 */
/* (809) the function ADT_STRING_237 implementing operation STRING__237 */
/* (810) the function ADT_STRING_238 implementing operation STRING__238 */
/* (811) the function ADT_STRING_239 implementing operation STRING__239 */
/* (812) the function ADT_STRING_240 implementing operation STRING__240 */
/* (813) the function ADT_STRING_241 implementing operation STRING__241 */
/* (814) the function ADT_STRING_242 implementing operation STRING__242 */
/* (815) the function ADT_STRING_243 implementing operation STRING__243 */
/* (816) the function ADT_STRING_244 implementing operation STRING__244 */
/* (817) the function ADT_STRING_245 implementing operation STRING__245 */
/* (818) the function ADT_STRING_246 implementing operation STRING__246 */
/* (819) the function ADT_STRING_247 implementing operation STRING__247 */
/* (820) the function ADT_STRING_248 implementing operation STRING__248 */
/* (821) the function ADT_STRING_249 implementing operation STRING__249 */
/* (822) the function ADT_STRING_250 implementing operation STRING__250 */
/* (823) the function ADT_STRING_251 implementing operation STRING__251 */
/* (824) the function ADT_STRING_252 implementing operation STRING__252 */
/* (825) the function ADT_STRING_253 implementing operation STRING__253 */
/* (826) the function ADT_STRING_254 implementing operation STRING__254 */
/* (827) the function ADT_STRING_255 implementing operation STRING__255 */
/* (828) the function ADT_STORE_STRING implementing operation STRING */
/* (829) the function ADT_CONCAT_BIS_STRING implementing operation + */
/* (830) the function ADT_CONCAT_CONST_BIS_STRING implementing operation ~ */
/* (831) the function ADT_PREFIX_BIS_STRING implementing operation PREFIX */
/* (832) the function ADT_SUFFIX_BIS_STRING implementing operation SUFFIX */
/* (833) the function ADT_NTH_BIS_STRING implementing operation NTH */
/* (834) the function ADT_INDEX_BIS_STRING implementing operation INDEX */
/* (835) the function ADT_RINDEX_BIS_STRING implementing operation RINDEX */
/* (836) the function ADT_EQ_TER_STRING implementing operation EQ */
/* (837) the function ADT_EQ_QUA_STRING implementing operation == */
/* (838) the function ADT_NE_QUA_STRING implementing operation NE */
/* (839) the function ADT_NE_QUI_STRING implementing operation <> */
/* (840) the function ADT_NE_SEX_STRING implementing operation /= */
/* (841) the function ADT_LT_TER_STRING implementing operation LT */
/* (842) the function ADT_LT_QUA_STRING implementing operation < */
/* (843) the function ADT_LE_TER_STRING implementing operation LE */
/* (844) the function ADT_LE_QUA_STRING implementing operation <= */
/* (845) the function ADT_GT_TER_STRING implementing operation GT */
/* (846) the function ADT_GT_QUA_STRING implementing operation > */
/* (847) the function ADT_GE_TER_STRING implementing operation GE */
/* (848) the function ADT_GE_QUA_STRING implementing operation >= */
/* (849) the function ADT_NUMBER0 implementing operation 0 */
/* (850) the function ADT_NUMBER1 implementing operation 1 */
/* (851) the function ADT_NUMBER2 implementing operation 2 */
/* (852) the function ADT_NUMBER3 implementing operation 3 */
/* (853) the function ADT_NUMBER4 implementing operation 4 */
/* (854) the function ADT_NUMBER5 implementing operation 5 */
/* (855) the function ADT_NUMBER6 implementing operation 6 */
/* (856) the function ADT_NUMBER7 implementing operation 7 */
/* (857) the function ADT_NUMBER8 implementing operation 8 */
/* (858) the function ADT_NUMBER9 implementing operation 9 */
/* (859) the function ADT_DECNUM_NUMBER implementing operation DECNUM */
/* (860) the function ADT_EXCEPTION__NONE__NAME__UNEXPECTED implementing operation EXCEPTION__NONE__NAME__UNEXPECTED */

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

ADT_NAT CAESAR_ADT_FUNC_GET__1__1(CAESAR_ADT_1)
ADT_INT CAESAR_ADT_1;
{
if (CAESAR_ADT_MATCH_ADT_POS_INT (CAESAR_ADT_1))
return CAESAR_ADT_GET_1_ADT_POS_INT(CAESAR_ADT_1);
else
return CAESAR_ADT_GET_1_ADT_NEG_INT(CAESAR_ADT_1);
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

CAESAR_ADT_TYPE_NATSET CAESAR_ADT_FUNC_DELETE(CAESAR_ADT_1, CAESAR_ADT_2)
ADT_NAT CAESAR_ADT_1;
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_2;
{
if (CAESAR_ADT_MATCH_NIL (CAESAR_ADT_2))
return CAESAR_ADT_2;
else
if (ADT_CMP_NAT(CAESAR_ADT_1, CAESAR_ADT_GET_1_CONS(CAESAR_ADT_2)))
return CAESAR_ADT_GET_2_CONS(CAESAR_ADT_2);
else
return CAESAR_ADT_FUNC_CONS (CAESAR_ADT_GET_1_CONS(CAESAR_ADT_2), CAESAR_ADT_FUNC_DELETE (CAESAR_ADT_1, CAESAR_ADT_GET_2_CONS(CAESAR_ADT_2)));
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

CAESAR_ADT_TYPE_NATSET INSERT__NATSET__GENERATED(CAESAR_ADT_1, CAESAR_ADT_2)
ADT_NAT CAESAR_ADT_1;
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_2;
{
if (ADT_CMP_BOOL(CAESAR_ADT_FUNC_MEMBER (CAESAR_ADT_1, CAESAR_ADT_2), ADT_TRUE ()))
return CAESAR_ADT_2;
else
return CAESAR_ADT_FUNC_CONS (CAESAR_ADT_1, CAESAR_ADT_2);
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

ADT_NAT CAESAR_ADT_FUNC_LENGTH__1(CAESAR_ADT_1)
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_1;
{
if (CAESAR_ADT_MATCH_NIL (CAESAR_ADT_1))
return ADT_N0 ();
else
return ADT_PLUS_NAT (CAESAR_ADT_FUNC_LENGTH__1 (CAESAR_ADT_GET_2_CONS(CAESAR_ADT_1)), ADT_N1 ());
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

ADT_BOOL CAESAR_ADT_FUNC_MEMBER(CAESAR_ADT_1, CAESAR_ADT_2)
ADT_NAT CAESAR_ADT_1;
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_2;
{
if (CAESAR_ADT_MATCH_NIL (CAESAR_ADT_2))
return ADT_FALSE ();
else
if (ADT_CMP_NAT(CAESAR_ADT_1, CAESAR_ADT_GET_1_CONS(CAESAR_ADT_2)))
return ADT_TRUE ();
else
return CAESAR_ADT_FUNC_MEMBER (CAESAR_ADT_1, CAESAR_ADT_GET_2_CONS(CAESAR_ADT_2));
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

ADT_NAT CAESAR_ADT_FUNC_GET__1__2(CAESAR_ADT_1)
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_1;
{
if (CAESAR_ADT_MATCH_CONS (CAESAR_ADT_1))
return CAESAR_ADT_GET_1_CONS(CAESAR_ADT_1);
else
CAESAR_ADT_ERROR ("GET__1 [COMMON:19]", "CAESAR_ADT_FUNC_GET__1__2");

CAESAR_ADT_EXIT_DEBUG:
CAESAR_ADT_ARGUMENT_TRACE (1, CAESAR_ADT_1, CAESAR_ADT_PRT_NATSET);fprintf (stdout, "\n"); fflush (stdout); raise (SIGTERM);
/* NOTREACHED */
#ifdef __GNUC__
exit (1); /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

CAESAR_ADT_TYPE_NATSET CAESAR_ADT_FUNC_GET__2(CAESAR_ADT_1)
CAESAR_ADT_TYPE_NATSET CAESAR_ADT_1;
{
if (CAESAR_ADT_MATCH_CONS (CAESAR_ADT_1))
return CAESAR_ADT_GET_2_CONS(CAESAR_ADT_1);
else
CAESAR_ADT_ERROR ("GET__2 [COMMON:20]", "CAESAR_ADT_FUNC_GET__2");

CAESAR_ADT_EXIT_DEBUG:
CAESAR_ADT_ARGUMENT_TRACE (1, CAESAR_ADT_1, CAESAR_ADT_PRT_NATSET);fprintf (stdout, "\n"); fflush (stdout); raise (SIGTERM);
/* NOTREACHED */
#ifdef __GNUC__
exit (1); /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

ADT_INT ARRAY__GET__MEMARRAY__GENERATED(CAESAR_ADT_1, CAESAR_ADT_2)
CAESAR_ADT_TYPE_MEMARRAY CAESAR_ADT_1;
ADT_NAT CAESAR_ADT_2;
{
if (CAESAR_ADT_MATCH_ADT_SUCC_NAT (CAESAR_ADT_2) && CAESAR_ADT_MATCH_ADT_N0 (CAESAR_ADT_GET_1_ADT_SUCC_NAT(CAESAR_ADT_2)))
return CAESAR_ADT_GET_1_MEMARRAY(CAESAR_ADT_1);
else
CAESAR_ADT_ERROR ("ARRAY__GET [COMMON:24]", "ARRAY__GET__MEMARRAY__GENERATED");

CAESAR_ADT_EXIT_DEBUG:
CAESAR_ADT_ARGUMENT_TRACE (1, CAESAR_ADT_1, CAESAR_ADT_PRT_MEMARRAY);CAESAR_ADT_ARGUMENT_TRACE (2, CAESAR_ADT_2, ADT_PRINT_NAT);fprintf (stdout, "\n"); fflush (stdout); raise (SIGTERM);
/* NOTREACHED */
#ifdef __GNUC__
exit (1); /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

CAESAR_ADT_TYPE_MEMARRAY ARRAY__SET__MEMARRAY__GENERATED(CAESAR_ADT_1, CAESAR_ADT_2, CAESAR_ADT_3)
CAESAR_ADT_TYPE_MEMARRAY CAESAR_ADT_1;
ADT_NAT CAESAR_ADT_2;
ADT_INT CAESAR_ADT_3;
{
if (CAESAR_ADT_MATCH_ADT_SUCC_NAT (CAESAR_ADT_2) && CAESAR_ADT_MATCH_ADT_N0 (CAESAR_ADT_GET_1_ADT_SUCC_NAT(CAESAR_ADT_2)))
return (CAESAR_ADT_USE (CAESAR_ADT_1), CAESAR_ADT_FUNC_MEMARRAY (CAESAR_ADT_3));
else
CAESAR_ADT_ERROR ("ARRAY__SET [COMMON:25]", "ARRAY__SET__MEMARRAY__GENERATED");

CAESAR_ADT_EXIT_DEBUG:
CAESAR_ADT_ARGUMENT_TRACE (1, CAESAR_ADT_1, CAESAR_ADT_PRT_MEMARRAY);CAESAR_ADT_ARGUMENT_TRACE (2, CAESAR_ADT_2, ADT_PRINT_NAT);CAESAR_ADT_ARGUMENT_TRACE (3, CAESAR_ADT_3, ADT_PRINT_INT);fprintf (stdout, "\n"); fflush (stdout); raise (SIGTERM);
/* NOTREACHED */
#ifdef __GNUC__
exit (1); /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

ADT_RANGE__MEMLOC ADT_RANGE_CAST__MEMLOC__GENERATED(CAESAR_ADT_1)
ADT_NAT CAESAR_ADT_1;
{
if (ADT_CMP_BOOL(ADT_LE_BIS_NAT (ADT_N1 (), CAESAR_ADT_1), ADT_TRUE ()) && ADT_CMP_BOOL(ADT_LE_BIS_NAT (CAESAR_ADT_1, ADT_N1 ()), ADT_TRUE ()))
return ADT_RANGE_CONSTRUCTOR__MEMLOC (CAESAR_ADT_1);
else
CAESAR_ADT_ERROR ("MEMLOC [COMMON:31]", "ADT_RANGE_CAST__MEMLOC__GENERATED");

CAESAR_ADT_EXIT_DEBUG:
CAESAR_ADT_ARGUMENT_TRACE (1, CAESAR_ADT_1, ADT_PRINT_NAT);fprintf (stdout, "\n"); fflush (stdout); raise (SIGTERM);
/* NOTREACHED */
#ifdef __GNUC__
exit (1); /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

CAESAR_ADT_TYPE_INSTRUCTION ADT_ACCESS__PROGRAM__GENERATED(CAESAR_ADT_1, CAESAR_ADT_2)
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_1;
ADT_NAT CAESAR_ADT_2;
{
if (CAESAR_ADT_MATCH_CONS__1 (CAESAR_ADT_1) && CAESAR_ADT_MATCH_ADT_SUCC_NAT (CAESAR_ADT_2))
if (CAESAR_ADT_MATCH_ADT_N0 (CAESAR_ADT_GET_1_ADT_SUCC_NAT(CAESAR_ADT_2)))
return CAESAR_ADT_GET_1_CONS__1(CAESAR_ADT_1);
else
return ADT_ACCESS__PROGRAM__GENERATED (CAESAR_ADT_GET_2_CONS__1(CAESAR_ADT_1), CAESAR_ADT_GET_1_ADT_SUCC_NAT(CAESAR_ADT_2));
else
CAESAR_ADT_ERROR ("ACCESS [COMMON:52]", "ADT_ACCESS__PROGRAM__GENERATED");

CAESAR_ADT_EXIT_DEBUG:
CAESAR_ADT_ARGUMENT_TRACE (1, CAESAR_ADT_1, CAESAR_ADT_PRT_PROGRAM);CAESAR_ADT_ARGUMENT_TRACE (2, CAESAR_ADT_2, ADT_PRINT_NAT);fprintf (stdout, "\n"); fflush (stdout); raise (SIGTERM);
/* NOTREACHED */
#ifdef __GNUC__
exit (1); /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

ADT_NAT CAESAR_ADT_FUNC_LENGTH__2(CAESAR_ADT_1)
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_1;
{
if (CAESAR_ADT_MATCH_NIL__1 (CAESAR_ADT_1))
return ADT_N0 ();
else
return ADT_PLUS_NAT (CAESAR_ADT_FUNC_LENGTH__2 (CAESAR_ADT_GET_2_CONS__1(CAESAR_ADT_1)), ADT_N1 ());
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

CAESAR_ADT_TYPE_INSTRUCTION CAESAR_ADT_FUNC_GET__1__5(CAESAR_ADT_1)
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_1;
{
if (CAESAR_ADT_MATCH_CONS__1 (CAESAR_ADT_1))
return CAESAR_ADT_GET_1_CONS__1(CAESAR_ADT_1);
else
CAESAR_ADT_ERROR ("GET__1 [COMMON:54]", "CAESAR_ADT_FUNC_GET__1__5");

CAESAR_ADT_EXIT_DEBUG:
CAESAR_ADT_ARGUMENT_TRACE (1, CAESAR_ADT_1, CAESAR_ADT_PRT_PROGRAM);fprintf (stdout, "\n"); fflush (stdout); raise (SIGTERM);
/* NOTREACHED */
#ifdef __GNUC__
exit (1); /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ------------------------------------------------------------------------- */

#ifndef CAESAR_ADT_INTERFACE

CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_FUNC_GET__2__2(CAESAR_ADT_1)
CAESAR_ADT_TYPE_PROGRAM CAESAR_ADT_1;
{
if (CAESAR_ADT_MATCH_CONS__1 (CAESAR_ADT_1))
return CAESAR_ADT_GET_2_CONS__1(CAESAR_ADT_1);
else
CAESAR_ADT_ERROR ("GET__2 [COMMON:55]", "CAESAR_ADT_FUNC_GET__2__2");

CAESAR_ADT_EXIT_DEBUG:
CAESAR_ADT_ARGUMENT_TRACE (1, CAESAR_ADT_1, CAESAR_ADT_PRT_PROGRAM);fprintf (stdout, "\n"); fflush (stdout); raise (SIGTERM);
/* NOTREACHED */
#ifdef __GNUC__
exit (1); /* to keep "gcc -Wall" silent */
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

#ifndef CAESAR_ADT_NO_DIAGNOSIS

#include "caesar_standard.h"

/* ------------------------------------------------------------------------- */

static char *CAESAR_ADT_CURRENT_CONSTANT_LOTOS = NULL;
static char *CAESAR_ADT_CURRENT_CONSTANT_C = NULL;

/* ------------------------------------------------------------------------- */

static void CAESAR_ADT_DIAGNOSIS_HANDLER (CAESAR_SIGNAL)
int CAESAR_SIGNAL;
{
printf ("#280 error in file ``.h'' :\n     unexpected problem in function CAESAR_ADT_INIT()\n     caught signal %d (%s)\n     while evaluating constant operation %s\n     implemented by function %s\n", CAESAR_SIGNAL, strsignal (CAESAR_SIGNAL), CAESAR_ADT_CURRENT_CONSTANT_LOTOS, CAESAR_ADT_CURRENT_CONSTANT_C);
fflush (stdout);
CAESAR_RESET_SIGNALS ();
raise (SIGTERM);
}

#endif /* CAESAR_ADT_NO_DIAGNOSIS */

/* ------------------------------------------------------------------------- */

void CAESAR_ADT_INIT ()
{
#ifndef CAESAR_ADT_NO_DIAGNOSIS
CAESAR_SET_SIGNALS (CAESAR_ADT_DIAGNOSIS_HANDLER);
#endif
#ifndef CAESAR_ADT_NO_DIAGNOSIS
CAESAR_ADT_CURRENT_CONSTANT_LOTOS = "NUMMEMLOC [COMMON:58]";
CAESAR_ADT_CURRENT_CONSTANT_C = "CAESAR_ADT_FUNC_NUMMEMLOC";
#endif
CAESAR_ADT_FUNC_NUMMEMLOC() = ADT_N1 ();
#ifndef CAESAR_ADT_NO_DIAGNOSIS
CAESAR_ADT_CURRENT_CONSTANT_LOTOS = "CHECK__CHANNEL__NONE [14]";
CAESAR_ADT_CURRENT_CONSTANT_C = "CAESAR_ADT_FUNC_CHECK__CHANNEL__NONE";
#endif
CAESAR_ADT_FUNC_CHECK__CHANNEL__NONE() = ADT_TRUE ();
#ifndef CAESAR_ADT_NO_DIAGNOSIS
CAESAR_RESET_SIGNALS ();
#endif
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */

#ifndef CAESAR_ADT_INTERFACE

void CAESAR_ADT_TERM (CAESAR_ADT_LOG_FILE)
FILE *CAESAR_ADT_LOG_FILE;
{
CAESAR_ADT_USE (CAESAR_ADT_LOG_FILE);
}

#endif /* CAESAR_ADT_INTERFACE */

/* ========================================================================= */
