-- This is an SVL script, see http://cadp.inria.fr/man/svl-lang.html

-- Sanity check: an interesting test, under no scheduler ("none"),
-- should have at least one cycle of EX-ecution steps property
-- NOTE: this is only expected on "<test>_none.lnt" which use SCHEDULER_NONE
property AtLeastOneLassoUnderNoScheduler (model)
is
  "${model}_one_lasso.bcg" = "${model}.bcg" |= with evaluator4
    < true* > < 'EX .*' > @;
  expected TRUE;
end property

-- Sanity check: from any state, there is always a way to reach
-- termination. Again, this should be tested only for "<test>_none.lnt"
-- see first example of: http://cadp.inria.fr/man/mcl4.html#sect16
property CanAlwaysReachTermination (model)
is
  "${model}_no_termination.bcg" = "${model}.bcg" |= with evaluator4
    [ true* . (not "exit") ] < (not "exit")* . "exit" > true;
  expected TRUE;
end property

-- With SCHEDULER_NONE, any test should verify the two sanity check properties
"test_73_none.bcg" = generation of "test_73_none.lnt";
check AtLeastOneLassoUnderNoScheduler(test_73_none);
check CanAlwaysReachTermination(test_73_none);

------------------------------------------------------------------------
-- Look for loops of thread execution steps under weak variants.
property FreeFromWeakDeadlockLasso (model)
    "There are no deadlock lassos in Weak ${model}"
is
    "${model}_deadlock.bcg" = "${model}.bcg" |= with evaluator4
        macro is_in (t, f) =
          ( index (f, concat (concat (":", string (t)), ":")) <> 0 )
        end_macro
        < true* . { EX ... ?fairlyScheduled:String } >
        <
            for tid:Nat from 0 to 4 do
                if is_in (tid, fairlyScheduled) then
                    true* . { EX !tid ... }
                end if
            end for
        > @;
    expected FALSE;
end property

-- Look for loops of thread execution steps under strong variants.
property FreeFromStrongDeadlockLasso (model)
    "There are no deadlock lassos in Strong ${model}"
is
    "${model}_deadlock.bcg" = "${model}.bcg" |= with evaluator4
      macro is_in (t, f) =
        ( index (f, concat (concat (":", string (t)), ":")) <> 0 )
      end_macro
        [ (not "exit") * ]
        < ( { EX ?tid:Nat ... ?fairlyScheduled:String where is_in (tid,
      fairlyScheduled) } or { TERMINATE ... } ) *
          . ( "exit" or { EX ... ?f:String where f = "::" } )
        > true;
    expected TRUE;
end property

"test_73_obe.bcg" = generation of "test_73_obe.lnt";
check FreeFromWeakDeadlockLasso(test_73_obe);
check FreeFromStrongDeadlockLasso(test_73_obe);

"test_73_hsa.bcg" = generation of "test_73_hsa.lnt";
check FreeFromWeakDeadlockLasso(test_73_hsa);
check FreeFromStrongDeadlockLasso(test_73_hsa);

"test_73_hsa_obe.bcg" = generation of "test_73_hsa_obe.lnt";
check FreeFromWeakDeadlockLasso(test_73_hsa_obe);
check FreeFromStrongDeadlockLasso(test_73_hsa_obe);

"test_73_hsa_priority.bcg" = generation of "test_73_hsa_priority.lnt";
check FreeFromWeakDeadlockLasso(test_73_hsa_priority);
check FreeFromStrongDeadlockLasso(test_73_hsa_priority);

"test_73_lobe.bcg" = generation of "test_73_lobe.lnt";
check FreeFromWeakDeadlockLasso(test_73_lobe);
check FreeFromStrongDeadlockLasso(test_73_lobe);

"test_73_weak.bcg" = generation of "test_73_weak.lnt";
check FreeFromWeakDeadlockLasso(test_73_weak);
check FreeFromStrongDeadlockLasso(test_73_weak);
