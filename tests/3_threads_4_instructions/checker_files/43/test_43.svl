-- This is an SVL script, see http://cadp.inria.fr/man/svl-lang.html

-- Sanity check: an interesting test, under no scheduler ("none"),
-- should have at least one cycle of EX-ecution steps property
-- NOTE: this is only expected on "<test>_none.lnt" which use SCHEDULER_NONE
property AtLeastOneLassoUnderNoScheduler (model)
is
  "${model}_one_lasso.bcg" = "${model}.bcg" |= with evaluator4
    < true* > < 'EX .*' > @;
  expected TRUE;
end property

-- Sanity check: from any state, there is always a way to reach
-- termination. Again, this should be tested only for "<test>_none.lnt"
-- see first example of: http://cadp.inria.fr/man/mcl4.html#sect16
property CanAlwaysReachTermination (model)
is
  "${model}_no_termination.bcg" = "${model}.bcg" |= with evaluator4
    [ true* . (not "exit") ] < (not "exit")* . "exit" > true;
  expected TRUE;
end property

-- With SCHEDULER_NONE, any test should verify the two sanity check properties
"test_43_none.bcg" = generation of "test_43_none.lnt";
check AtLeastOneLassoUnderNoScheduler(test_43_none);
check CanAlwaysReachTermination(test_43_none);

------------------------------------------------------------------------
-- Look for loops of thread execution steps.
property FreeFromDeadlockLasso (model)
    "There are no deadlock lassos in ${model}"
is
    "${model}_deadlock.bcg" = "${model}.bcg" |= with evaluator4
        <true*> (( <  'EX !2 .* !{2}' . true* > @ ) or ( <  'EX !1 .* !{1}' . true* > @ ) or ( <  'EX !1 .* !{1, 2}' . true* . 'EX !2 .* !{1, 2}' . true* > @ ) or ( <  'EX !0 .* !{0}' . true* > @ ) or ( <  'EX !0 .* !{0, 2}' . true* . 'EX !2 .* !{0, 2}' . true* > @ ) or ( <  'EX !0 .* !{0, 1}' . true* . 'EX !1 .* !{0, 1}' . true* > @ ) or ( <  'EX !0 .* !{0, 1, 2}' . true* . 'EX !1 .* !{0, 1, 2}' . true* . 'EX !2 .* !{0, 1, 2}' . true* > @ ));
    expected FALSE;
end property

"test_43_obe.bcg" = generation of "test_43_obe.lnt";
check FreeFromDeadlockLasso(test_43_obe);

"test_43_hsa.bcg" = generation of "test_43_hsa.lnt";
check FreeFromDeadlockLasso(test_43_hsa);

"test_43_hsa_obe.bcg" = generation of "test_43_hsa_obe.lnt";
check FreeFromDeadlockLasso(test_43_hsa_obe);

"test_43_hsa_priority.bcg" = generation of "test_43_hsa_priority.lnt";
check FreeFromDeadlockLasso(test_43_hsa_priority);

"test_43_lobe.bcg" = generation of "test_43_lobe.lnt";
check FreeFromDeadlockLasso(test_43_lobe);

"test_43_weak.bcg" = generation of "test_43_weak.lnt";
check FreeFromDeadlockLasso(test_43_weak);
